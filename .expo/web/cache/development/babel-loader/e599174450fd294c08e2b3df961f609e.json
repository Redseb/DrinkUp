{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./web/constants\");\n\nvar _FlingGestureHandler = _interopRequireDefault(require(\"./web/FlingGestureHandler\"));\n\nvar _LongPressGestureHandler = _interopRequireDefault(require(\"./web/LongPressGestureHandler\"));\n\nvar _NativeViewGestureHandler = _interopRequireDefault(require(\"./web/NativeViewGestureHandler\"));\n\nvar NodeManager = _interopRequireWildcard(require(\"./web/NodeManager\"));\n\nvar _PanGestureHandler = _interopRequireDefault(require(\"./web/PanGestureHandler\"));\n\nvar _PinchGestureHandler = _interopRequireDefault(require(\"./web/PinchGestureHandler\"));\n\nvar _RotationGestureHandler = _interopRequireDefault(require(\"./web/RotationGestureHandler\"));\n\nvar _TapGestureHandler = _interopRequireDefault(require(\"./web/TapGestureHandler\"));\n\nvar Gestures = {\n  PanGestureHandler: _PanGestureHandler.default,\n  RotationGestureHandler: _RotationGestureHandler.default,\n  PinchGestureHandler: _PinchGestureHandler.default,\n  TapGestureHandler: _TapGestureHandler.default,\n  NativeViewGestureHandler: _NativeViewGestureHandler.default,\n  LongPressGestureHandler: _LongPressGestureHandler.default,\n  FlingGestureHandler: _FlingGestureHandler.default\n};\nvar _default = {\n  Direction: _constants.Direction,\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n    var GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView) {\n    NodeManager.getHandler(handlerTag).setView(newView);\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-gesture-handler/RNGestureHandlerModule.web.js"],"names":["Gestures","PanGestureHandler","RotationGestureHandler","PinchGestureHandler","TapGestureHandler","NativeViewGestureHandler","LongPressGestureHandler","FlingGestureHandler","Direction","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","NodeManager","updateGestureHandler","attachGestureHandler","newView","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAG;AACfC,EAAAA,iBAAiB,EAAjBA,0BADe;AAEfC,EAAAA,sBAAsB,EAAtBA,+BAFe;AAGfC,EAAAA,mBAAmB,EAAnBA,4BAHe;AAIfC,EAAAA,iBAAiB,EAAjBA,0BAJe;AAKfC,EAAAA,wBAAwB,EAAxBA,iCALe;AAMfC,EAAAA,uBAAuB,EAAvBA,gCANe;AAOfC,EAAAA,mBAAmB,EAAnBA;AAPe,CAAjB;eAWe;AACbC,EAAAA,SAAS,EAATA,oBADa;AAEbC,EAAAA,oBAFa,gCAEQC,GAFR,EAEaC,oBAFb,EAEmC;AAC9CC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb,EAAuCH,GAAvC,EAA4CC,oBAA5C;AACD,GAJY;AAKbG,EAAAA,sBALa,oCAKY;AACvBF,IAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb;AACD,GAPY;AAQbE,EAAAA,oBARa,gCAQQC,WARR,EAQqBC,UARrB,EAQiCC,MARjC,EAQyC;AACpD,QAAI,EAAEF,WAAW,IAAIhB,QAAjB,CAAJ,EACE,MAAM,IAAImB,KAAJ,oCAA2CH,WAA3C,+BAAN;AACF,QAAMI,YAAY,GAAGpB,QAAQ,CAACgB,WAAD,CAA7B;AACAK,IAAAA,WAAW,CAACN,oBAAZ,CAAiCE,UAAjC,EAA6C,IAAIG,YAAJ,EAA7C;AACA,SAAKE,oBAAL,CAA0BL,UAA1B,EAAsCC,MAAtC;AACD,GAdY;AAebK,EAAAA,oBAfa,gCAeQN,UAfR,EAeoBO,OAfpB,EAe6B;AACxCH,IAAAA,WAAW,CAACI,UAAZ,CAAuBR,UAAvB,EAAmCS,OAAnC,CAA2CF,OAA3C;AACD,GAjBY;AAkBbF,EAAAA,oBAlBa,gCAkBQL,UAlBR,EAkBoBU,SAlBpB,EAkB+B;AAC1CN,IAAAA,WAAW,CAACI,UAAZ,CAAuBR,UAAvB,EAAmCW,mBAAnC,CAAuDD,SAAvD;AACD,GApBY;AAqBbE,EAAAA,qBArBa,iCAqBSZ,UArBT,EAqBqB;AAChC,WAAOI,WAAW,CAACI,UAAZ,CAAuBR,UAAvB,CAAP;AACD,GAvBY;AAwBba,EAAAA,kBAxBa,8BAwBMb,UAxBN,EAwBkB;AAC7BI,IAAAA,WAAW,CAACS,kBAAZ,CAA+Bb,UAA/B;AACD;AA1BY,C","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nconst Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures))\n      throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(handlerTag, newView) {\n    NodeManager.getHandler(handlerTag).setView(newView);\n  },\n  updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}