{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _useCode = _interopRequireDefault(require(\"../derived/useCode\"));\n\nvar _AnimatedNode = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    var error = !children ? \"Got \\\"\" + typeof children + \"\\\" type passed to children\" : \"Got \\\"\" + typeof exec + \"\\\" type passed to exec\";\n    throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \" + error);\n  }\n}\n\nfunction Code(_ref) {\n  var exec = _ref.exec,\n      children = _ref.children,\n      _ref$dependencies = _ref.dependencies,\n      dependencies = _ref$dependencies === void 0 ? [] : _ref$dependencies;\n  var nodes = children || exec;\n  var code = null;\n\n  if (nodes instanceof _AnimatedNode.default) {\n    code = function code() {\n      return nodes;\n    };\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n  (0, _useCode.default)(code, dependencies);\n  return null;\n}\n\nvar _default = Code;\nexports.default = _default;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-reanimated/src/core/AnimatedCode.js"],"names":["assertNodesNotNull","code","children","exec","error","Error","Code","dependencies","nodes","AnimatedNode"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;AAChD,MAAI,CAACF,IAAL,EAAW;AACT,QAAMG,KAAK,GAAG,CAACF,QAAD,cACF,OAAOA,QADL,6CAEF,OAAOC,IAFL,2BAAd;AAIA,UAAM,IAAIE,KAAJ,6HACsHD,KADtH,CAAN;AAGD;AACF;;AAED,SAASE,IAAT,OAAqD;AAAA,MAArCH,IAAqC,QAArCA,IAAqC;AAAA,MAA/BD,QAA+B,QAA/BA,QAA+B;AAAA,+BAArBK,YAAqB;AAAA,MAArBA,YAAqB,kCAAN,EAAM;AACnD,MAAMC,KAAK,GAAGN,QAAQ,IAAIC,IAA1B;AAEA,MAAIF,IAAI,GAAG,IAAX;;AACA,MAAIO,KAAK,YAAYC,qBAArB,EAAmC;AACjCR,IAAAA,IAAI,GAAG;AAAA,aAAMO,KAAN;AAAA,KAAP;AACD,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AACtCP,IAAAA,IAAI,GAAGO,KAAP;AACD;;AAEDR,EAAAA,kBAAkB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,IAAjB,CAAlB;AAEA,wBAAQF,IAAR,EAAcM,YAAd;AACA,SAAO,IAAP;AACD;;eAEcD,I","sourcesContent":["import useCode from '../derived/useCode';\nimport AnimatedNode from './AnimatedNode';\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    const error = !children\n      ? `Got \"${typeof children}\" type passed to children`\n      : `Got \"${typeof exec}\" type passed to exec`;\n\n    throw new Error(\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n    );\n  }\n}\n\nfunction Code({ exec, children, dependencies = [] }) {\n  const nodes = children || exec;\n\n  let code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = () => nodes;\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;\n"]},"metadata":{},"sourceType":"script"}