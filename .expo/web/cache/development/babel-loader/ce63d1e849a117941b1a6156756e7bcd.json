{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.find = exports.contains = exports.get = void 0;\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nvar Value = _reactNativeReanimated.default.Value,\n    cond = _reactNativeReanimated.default.cond,\n    eq = _reactNativeReanimated.default.eq,\n    or = _reactNativeReanimated.default.or;\n\nvar get = function get(array, index) {\n  var notFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Value();\n  return array.reduce(function (acc, v, i) {\n    return cond(eq(i, index), v, acc);\n  }, notFound);\n};\n\nexports.get = get;\n\nvar contains = function contains(values, value) {\n  return values.reduce(function (acc, v) {\n    return or(acc, eq(value, v));\n  }, new Value(0));\n};\n\nexports.contains = contains;\n\nvar find = function find(values, fn) {\n  var notFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Value();\n  return values.reduce(function (acc, v) {\n    return cond(fn(v), v, acc);\n  }, notFound);\n};\n\nexports.find = find;","map":{"version":3,"sources":["Array.ts"],"names":["Value","cond","eq","or","Animated","get","notFound","array","contains","values","find","fn"],"mappings":";;;;;;;AAAA;;AAEQA,IAAAA,K,GAAwBI,+BAAxBJ,KAAAA;AAAAA,IAAOC,I,GAAiBG,+BAAjBH,IAAPD;AAAAA,IAAaE,E,GAAWE,+BAAXF,EAAbF;AAAAA,IAAiBG,E,GAAOC,+BAAPD,EAAjBH;;AAED,IAAMK,GAAG,GAAHA,SAAAA,GAAAA,CAAM,KAANA,EAAM,KAANA,EAAM;AAAA,MAGjBC,QAHiB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAGiB,IAHjB,KAGiB,EAHjB;AAAA,SAKjBC,KAAK,CAALA,MAAAA,CACE,UAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAeN,IAAI,CAACC,EAAE,CAAA,CAAA,EAAH,KAAG,CAAH,EAAA,CAAA,EAAnB,GAAmB,CAAnB;AADFK,GAAAA,EALiB,QAKjBA,CALiB;AAAZ,CAAA;;;;AAUA,IAAMC,QAAQ,GAARA,SAAAA,QAAAA,CAAW,MAAXA,EAAW,KAAXA,EAAW;AAAA,SAItBC,MAAM,CAANA,MAAAA,CACE,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,WAAYN,EAAE,CAAA,GAAA,EAAMD,EAAE,CAAA,KAAA,EAAtB,CAAsB,CAAR,CAAd;AADFO,GAAAA,EAEE,IAAA,KAAA,CANoB,CAMpB,CAFFA,CAJsB;AAAjB,CAAA;;;;AASA,IAAMC,IAAI,GAAJA,SAAAA,IAAAA,CAAO,MAAPA,EAAO,EAAPA,EAAO;AAAA,MAGlBJ,QAHkB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAGgB,IAHhB,KAGgB,EAHhB;AAAA,SAIfG,MAAM,CAANA,MAAAA,CAAc,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,WAAYR,IAAI,CAACU,EAAE,CAAH,CAAG,CAAH,EAAA,CAAA,EAAhB,GAAgB,CAAhB;AAAdF,GAAAA,EAJe,QAIfA,CAJe;AAAb,CAAA","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst { Value, cond, eq, or } = Animated;\n\nexport const get = (\n  array: Animated.Adaptable<number>[],\n  index: Animated.Adaptable<number>,\n  notFound: Animated.Node<number> = new Value()\n): Animated.Node<number> =>\n  array.reduce(\n    (acc, v, i) => cond(eq(i, index), v, acc),\n    notFound\n  ) as Animated.Node<number>;\n\nexport const contains = (\n  values: Animated.Adaptable<number>[],\n  value: Animated.Adaptable<number>\n): Animated.Node<0 | 1> =>\n  values.reduce(\n    (acc, v) => or(acc, eq(value, v)),\n    new Value(0)\n  ) as Animated.Node<0 | 1>;\n\nexport const find = (\n  values: Animated.Node<number>[],\n  fn: (v: Animated.Node<number>) => Animated.Node<number>,\n  notFound: Animated.Node<number> = new Value()\n) => values.reduce((acc, v) => cond(fn(v), v, acc), notFound);\n"]},"metadata":{},"sourceType":"script"}