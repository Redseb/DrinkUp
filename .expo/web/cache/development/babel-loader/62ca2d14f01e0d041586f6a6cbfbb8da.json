{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _GestureHandler2 = _interopRequireDefault(require(\"./GestureHandler\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar IndiscreteGestureHandler = function (_GestureHandler) {\n  (0, _inherits2.default)(IndiscreteGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(IndiscreteGestureHandler);\n\n  function IndiscreteGestureHandler() {\n    (0, _classCallCheck2.default)(this, IndiscreteGestureHandler);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(IndiscreteGestureHandler, [{\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 2 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 2 : _ref$maxPointers,\n          props = (0, _objectWithoutProperties2.default)(_ref, [\"minPointers\", \"maxPointers\"]);\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(IndiscreteGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref2, recognizer, _ref3) {\n      var minPointers = _ref2.minPointers,\n          maxPointers = _ref2.maxPointers;\n      var pointerLength = _ref3.maxPointers;\n\n      if (pointerLength > maxPointers) {\n        return {\n          failed: true\n        };\n      }\n\n      var validPointerCount = pointerLength >= minPointers;\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return false;\n    }\n  }]);\n  return IndiscreteGestureHandler;\n}(_GestureHandler2.default);\n\nvar _default = IndiscreteGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-gesture-handler/web/IndiscreteGestureHandler.js"],"names":["IndiscreteGestureHandler","minPointers","maxPointers","props","recognizer","pointerLength","failed","validPointerCount","success","GestureHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;IAKMA,wB;;;;;;;;;;;;8CAKgE;AAAA,kCAA9CC,WAA8C;AAAA,UAA9CA,WAA8C,iCAAhC,CAAgC;AAAA,kCAA7BC,WAA6B;AAAA,UAA7BA,WAA6B,iCAAf,CAAe;AAAA,UAATC,KAAS;AAClE;AACEF,QAAAA,WAAW,EAAXA,WADF;AAEEC,QAAAA,WAAW,EAAXA;AAFF,SAGKC,KAHL;AAKD;;;oDAICC,U,SAEA;AAAA,UAHEH,WAGF,SAHEA,WAGF;AAAA,UAHeC,WAGf,SAHeA,WAGf;AAAA,UADeG,aACf,SADEH,WACF;;AACA,UAAIG,aAAa,GAAGH,WAApB,EAAiC;AAC/B,eAAO;AAAEI,UAAAA,MAAM,EAAE;AAAV,SAAP;AACD;;AACD,UAAMC,iBAAiB,GAAGF,aAAa,IAAIJ,WAA3C;AACA,aAAO;AACLO,QAAAA,OAAO,EAAED;AADJ,OAAP;AAGD;;;wBAxBgC;AAC/B,aAAO,KAAP;AACD;;;EAHoCE,wB;;eA2BxBT,wB","sourcesContent":["import GestureHandler from './GestureHandler';\n\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */\nclass IndiscreteGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return false;\n  }\n\n  updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n    return super.updateGestureConfig({\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  isGestureEnabledForEvent(\n    { minPointers, maxPointers },\n    recognizer,\n    { maxPointers: pointerLength }\n  ) {\n    if (pointerLength > maxPointers) {\n      return { failed: true };\n    }\n    const validPointerCount = pointerLength >= minPointers;\n    return {\n      success: validPointerCount,\n    };\n  }\n}\nexport default IndiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"script"}