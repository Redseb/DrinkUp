{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Ionicons = _interopRequireDefault(require(\"react-native-vector-icons/Ionicons\"));\n\nvar _useMemoOne2 = require(\"use-memo-one\");\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _Swipeable = _interopRequireDefault(require(\"../components/Swipeable\"));\n\nvar _Card = _interopRequireDefault(require(\"../components/Card\"));\n\nvar _cardSupplier = require(\"../util/card-supplier\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Programming\\\\React Native\\\\drinkUp\\\\src\\\\screens\\\\GameScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _Dimensions$get = _reactNative.Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar deltaX = width / 2;\nvar α = Math.PI / 12;\nvar A = Math.round(width * Math.cos(α) + height * Math.sin(α));\nvar snapPointsX = [-A, 0, A];\nvar snapPointsY = [-A * 3, 0, A * 2];\n\nvar GameScreen = function GameScreen(_ref) {\n  var players = _ref.players,\n      setPlayers = _ref.setPlayers,\n      setInGame = _ref.setInGame,\n      deck = _ref.deck,\n      setDeck = _ref.setDeck,\n      currCardIndex = _ref.currCardIndex,\n      setCurrCardIndex = _ref.setCurrCardIndex;\n  var slideUpY = (0, _reactNativeReanimated.useSharedValue)(height);\n  var slideUpAnim = (0, _reactNativeReanimated.useAnimatedStyle)(function () {\n    const _f = function () {\n      return {\n        transform: [{\n          translateY: slideUpY.value\n        }]\n      };\n    };\n\n    _f._closure = {\n      slideUpY\n    };\n    _f.asString = \"function _f(){const{slideUpY}=jsThis._closure;{return{transform:[{translateY:slideUpY.value}]};}}\";\n    _f.__workletHash = 2081831469126;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var backButtonScale = (0, _reactNativeReanimated.useSharedValue)(1);\n  var backButtonAnim = (0, _reactNativeReanimated.useAnimatedStyle)(function () {\n    const _f = function () {\n      return {\n        transform: [{\n          scale: (0, _reactNativeReanimated.sequence)((0, _reactNativeReanimated.withTiming)(backButtonScale.value, {\n            duration: 100\n          }), (0, _reactNativeReanimated.withTiming)(1, {\n            duration: 100\n          }))\n        }]\n      };\n    };\n\n    _f._closure = {\n      sequence: _reactNativeReanimated.sequence,\n      withTiming: _reactNativeReanimated.withTiming,\n      backButtonScale\n    };\n    _f.asString = \"function _f(){const{sequence,withTiming,backButtonScale}=jsThis._closure;{return{transform:[{scale:sequence(withTiming(backButtonScale.value,{duration:100}),withTiming(1,{duration:100}))}]};}}\";\n    _f.__workletHash = 6956365842351;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n\n  var _useMemoOne = (0, _useMemoOne2.useMemoOne)(function () {\n    return {\n      x: new _reactNativeReanimated.Value(0),\n      y: new _reactNativeReanimated.Value(0),\n      offsetX: new _reactNativeReanimated.Value(0),\n      offsetY: new _reactNativeReanimated.Value(0)\n    };\n  }, []),\n      x = _useMemoOne.x,\n      y = _useMemoOne.y,\n      offsetX = _useMemoOne.offsetX,\n      offsetY = _useMemoOne.offsetY;\n\n  (0, _react.useEffect)(function () {\n    slideUpY.value = (0, _reactNativeReanimated.withSpring)(0, {\n      damping: 20\n    });\n\n    if (currCardIndex == deck.length - 1) {\n      var newDeck = (0, _cardSupplier.shuffle)(deck);\n      setDeck(newDeck);\n    }\n  }, [currCardIndex]);\n  var onSnap = (0, _useMemoOne2.useMemoOne)(function () {\n    return function (_ref2) {\n      var _ref3 = (0, _slicedToArray2.default)(_ref2, 1),\n          point = _ref3[0];\n\n      if (point !== 0) {\n        slideUpY.value = height;\n        offsetX.setValue(0);\n        x.setValue(0);\n        offsetY.setValue(0);\n        y.setValue(0);\n        setCurrCardIndex((currCardIndex + 1) % deck.length);\n      }\n    };\n  }, [currCardIndex, offsetX, offsetY, deck.length]);\n  var rotateZ = (0, _reactNativeReanimated.concat)((0, _reactNativeReanimated.interpolateNode)(x, {\n    inputRange: [-1 * deltaX, deltaX],\n    outputRange: [α, -1 * α],\n    extrapolate: _reactNativeReanimated.Extrapolate.CLAMP\n  }), 'rad');\n  var translateX = x;\n  var translateY = y;\n\n  var onBack = function onBack() {\n    setTimeout(function () {\n      backButtonScale.value = 0.9;\n      slideUpY.value = (0, _reactNativeReanimated.withSpring)(height, {\n        damping: 20\n      });\n      setTimeout(function () {\n        return setInGame(false);\n      }, 300);\n    }, 200);\n  };\n\n  (0, _react.useEffect)(function () {\n    var backHandler = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {\n      onBack();\n      return true;\n    });\n\n    return function () {\n      backHandler.remove();\n    };\n  }, []);\n  return _react.default.createElement(_reactNative.View, {\n    style: [styles.container, _reactNative.StyleSheet.absoluteFillObject],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNativeReanimated.default.View, {\n    style: [backButtonAnim, styles.backButtonContainer, _reactNative.StyleSheet.absoluteFillObject],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeGestureHandler.RectButton, {\n    onPress: onBack,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_Ionicons.default, {\n    name: \"arrow-back\",\n    size: height / 18,\n    color: \"#FDD451\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }))), _react.default.createElement(_reactNativeReanimated.default.View, {\n    style: [slideUpAnim, _reactNative.StyleSheet.absoluteFillObject],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeReanimated.default.View, {\n    style: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n      transform: [{\n        translateX: translateX\n      }, {\n        translateY: translateY\n      }, {\n        rotateZ: rotateZ\n      }]\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_Card.default, {\n    emoji: deck[currCardIndex].emoji,\n    title: deck[currCardIndex].title,\n    desc: deck[currCardIndex].desc,\n    type: deck[currCardIndex].type,\n    player: players[currCardIndex % players.length],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }))), _react.default.createElement(_Swipeable.default, (0, _extends2.default)({\n    key: currCardIndex\n  }, {\n    snapPointsX: snapPointsX,\n    snapPointsY: snapPointsY,\n    onSnap: onSnap,\n    x: x,\n    y: y,\n    offsetX: offsetX,\n    offsetY: offsetY\n  }, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  })));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    height: height,\n    width: width,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  backButtonContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#303030',\n    width: height / 18,\n    height: height / 18,\n    marginTop: height / 20,\n    marginLeft: width / 30,\n    borderRadius: 10,\n    elevation: 5\n  }\n});\n\nvar _default = GameScreen;\nexports.default = _default;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/src/screens/GameScreen.js"],"names":["Dimensions","get","width","height","deltaX","α","Math","PI","A","round","cos","sin","snapPointsX","snapPointsY","GameScreen","players","setPlayers","setInGame","deck","setDeck","currCardIndex","setCurrCardIndex","slideUpY","slideUpAnim","transform","translateY","value","backButtonScale","backButtonAnim","scale","duration","sequence","withTiming","x","Value","y","offsetX","offsetY","damping","length","newDeck","onSnap","point","setValue","rotateZ","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","translateX","onBack","setTimeout","backHandler","BackHandler","addEventListener","remove","styles","container","StyleSheet","absoluteFillObject","backButtonContainer","emoji","title","desc","type","create","display","flexDirection","justifyContent","alignItems","backgroundColor","marginTop","marginLeft","borderRadius","elevation"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {StyleSheet, View, Dimensions, BackHandler} from 'react-native';\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\n\r\n//TinderSwipe\r\nimport {useMemoOne} from 'use-memo-one';\r\nimport Animated, {\r\n  Value,\r\n  interpolateNode,\r\n  concat,\r\n  Extrapolate,\r\n  useSharedValue,\r\n  useAnimatedStyle,\r\n  withSpring,\r\n  withTiming,\r\n  sequence,\r\n} from 'react-native-reanimated';\r\nimport Swipeable from '../components/Swipeable';\r\n\r\nconst {width, height} = Dimensions.get('window');\r\n\r\n//Components\r\nimport Card from '../components/Card';\r\n//Utils\r\nimport {initDeck, shuffle, nextCard} from '../util/card-supplier';\r\nimport {RectButton} from 'react-native-gesture-handler';\r\n\r\n//Tinder Swipe\r\nconst deltaX = width / 2;\r\nconst α = Math.PI / 12;\r\nconst A = Math.round(width * Math.cos(α) + height * Math.sin(α));\r\nconst snapPointsX = [-A, 0, A];\r\nconst snapPointsY = [-A * 3, 0, A * 2]; // Disables sliding up so the flicker bug doesnt appear\r\n\r\nconst GameScreen = ({\r\n  players,\r\n  setPlayers,\r\n  setInGame,\r\n  deck,\r\n  setDeck,\r\n  currCardIndex,\r\n  setCurrCardIndex,\r\n}) => {\r\n  const slideUpY = useSharedValue(height);\r\n  const slideUpAnim = useAnimatedStyle(() => {\r\n    return {\r\n      transform: [\r\n        {\r\n          translateY: slideUpY.value,\r\n        },\r\n      ],\r\n    };\r\n  });\r\n\r\n  const backButtonScale = useSharedValue(1);\r\n  const backButtonAnim = useAnimatedStyle(() => {\r\n    return {\r\n      transform: [\r\n        {\r\n          scale: sequence(\r\n            withTiming(backButtonScale.value, {\r\n              duration: 100,\r\n            }),\r\n            withTiming(1, {\r\n              duration: 100,\r\n            }),\r\n          ),\r\n        },\r\n      ],\r\n    };\r\n  });\r\n\r\n  //TinderSwipe\r\n  const {x, y, offsetX, offsetY} = useMemoOne(\r\n    () => ({\r\n      x: new Value(0),\r\n      y: new Value(0),\r\n      offsetX: new Value(0),\r\n      offsetY: new Value(0),\r\n    }),\r\n    [],\r\n  );\r\n  useEffect(() => {\r\n    slideUpY.value = withSpring(0, {damping: 20});\r\n    // console.log(deck);\r\n    if (currCardIndex == deck.length - 1) {\r\n      const newDeck = shuffle(deck);\r\n      setDeck(newDeck);\r\n    }\r\n  }, [currCardIndex]);\r\n\r\n  const onSnap = useMemoOne(\r\n    () => ([point]) => {\r\n      if (point !== 0) {\r\n        slideUpY.value = height;\r\n\r\n        offsetX.setValue(0);\r\n        x.setValue(0);\r\n        offsetY.setValue(0);\r\n        y.setValue(0);\r\n        setCurrCardIndex((currCardIndex + 1) % deck.length);\r\n      }\r\n    },\r\n    [currCardIndex, offsetX, offsetY, deck.length],\r\n  );\r\n  const rotateZ = concat(\r\n    interpolateNode(x, {\r\n      inputRange: [-1 * deltaX, deltaX],\r\n      outputRange: [α, -1 * α],\r\n      extrapolate: Extrapolate.CLAMP,\r\n    }),\r\n    'rad',\r\n  );\r\n  const translateX = x;\r\n  const translateY = y;\r\n  // End Tinder Swipe\r\n  // Handle back button physical or digital\r\n  const onBack = () => {\r\n    setTimeout(() => {\r\n      backButtonScale.value = 0.9;\r\n\r\n      slideUpY.value = withSpring(height, {damping: 20});\r\n      setTimeout(() => setInGame(false), 300);\r\n    }, 200);\r\n  };\r\n  // Set up BackHandler to go back to title screen when pressing back button (ANDROID)\r\n  useEffect(() => {\r\n    const backHandler = BackHandler.addEventListener(\r\n      'hardwareBackPress',\r\n      () => {\r\n        onBack();\r\n        return true;\r\n      },\r\n    );\r\n\r\n    return () => {\r\n      backHandler.remove();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <View style={[styles.container, StyleSheet.absoluteFillObject]}>\r\n      <Animated.View\r\n        style={[\r\n          backButtonAnim,\r\n          styles.backButtonContainer,\r\n          StyleSheet.absoluteFillObject,\r\n        ]}>\r\n        <RectButton onPress={onBack}>\r\n          <Icon name=\"arrow-back\" size={height / 18} color=\"#FDD451\" />\r\n        </RectButton>\r\n      </Animated.View>\r\n      <Animated.View style={[slideUpAnim, StyleSheet.absoluteFillObject]}>\r\n        <Animated.View\r\n          style={{\r\n            ...StyleSheet.absoluteFillObject,\r\n            transform: [{translateX}, {translateY}, {rotateZ}],\r\n          }}>\r\n          <Card\r\n            emoji={deck[currCardIndex].emoji}\r\n            title={deck[currCardIndex].title}\r\n            desc={deck[currCardIndex].desc}\r\n            type={deck[currCardIndex].type}\r\n            player={players[currCardIndex % players.length]}\r\n          />\r\n        </Animated.View>\r\n      </Animated.View>\r\n\r\n      <Swipeable\r\n        key={currCardIndex}\r\n        // {...{snapPointsX, onSnap, x, y, offsetX}}\r\n\r\n        {...{snapPointsX, snapPointsY, onSnap, x, y, offsetX, offsetY}}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    height: height,\r\n    width: width,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n  },\r\n  backButtonContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#303030',\r\n    width: height / 18,\r\n    height: height / 18,\r\n    marginTop: height / 20,\r\n    marginLeft: width / 30,\r\n    borderRadius: 10,\r\n    elevation: 5,\r\n  },\r\n});\r\n\r\nexport default GameScreen;\r\n"]},"metadata":{},"sourceType":"script"}