{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.debugGestureState = exports.scrollHandler = exports.rotationGestureHandler = exports.pinchGestureHandler = exports.panGestureHandler = exports.tapGestureHandler = exports.onGestureEvent = exports.onScrollEvent = exports.withDecay = exports.withSpring = exports.withOffset = exports.withScaleOffset = exports.pinchEnd = exports.pinchActive = exports.pinchBegan = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _Animations = require(\"./Animations\");\n\nvar _Vectors = require(\"./Vectors\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar proc = _reactNativeReanimated.default.proc,\n    Clock = _reactNativeReanimated.default.Clock,\n    Value = _reactNativeReanimated.default.Value,\n    event = _reactNativeReanimated.default.event,\n    add = _reactNativeReanimated.default.add,\n    block = _reactNativeReanimated.default.block,\n    cond = _reactNativeReanimated.default.cond,\n    eq = _reactNativeReanimated.default.eq,\n    multiply = _reactNativeReanimated.default.multiply,\n    set = _reactNativeReanimated.default.set,\n    stopClock = _reactNativeReanimated.default.stopClock,\n    and = _reactNativeReanimated.default.and,\n    not = _reactNativeReanimated.default.not,\n    clockRunning = _reactNativeReanimated.default.clockRunning,\n    startClock = _reactNativeReanimated.default.startClock,\n    neq = _reactNativeReanimated.default.neq,\n    call = _reactNativeReanimated.default.call,\n    reDecay = _reactNativeReanimated.default.decay,\n    reSpring = _reactNativeReanimated.default.spring,\n    onChange = _reactNativeReanimated.default.onChange,\n    debug = _reactNativeReanimated.default.debug;\nvar pinchBegan = proc(function (state) {\n  return _reactNative.Platform.OS === \"android\" ? cond(eq((0, _reactNativeReanimated.diff)(state), _reactNativeGestureHandler.State.ACTIVE - _reactNativeGestureHandler.State.BEGAN), eq(state, _reactNativeGestureHandler.State.ACTIVE)) : eq(state, _reactNativeGestureHandler.State.BEGAN);\n});\nexports.pinchBegan = pinchBegan;\nvar pinchActive = proc(function (state, numberOfPointers) {\n  return and(eq(state, _reactNativeGestureHandler.State.ACTIVE), eq(numberOfPointers, 2), _reactNative.Platform.OS === \"android\" ? not(pinchBegan(state)) : 1);\n});\nexports.pinchActive = pinchActive;\nvar pinchEnd = proc(function (state, numberOfPointers) {\n  return _reactNative.Platform.OS === \"android\" ? (0, _reactNativeReanimated.or)(eq(state, _reactNativeGestureHandler.State.END), (0, _reactNativeReanimated.lessThan)(numberOfPointers, 2)) : eq(state, _reactNativeGestureHandler.State.END);\n});\nexports.pinchEnd = pinchEnd;\n\nvar withScaleOffset = function withScaleOffset(value, state) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Value(1);\n  return cond(eq(state, _reactNativeGestureHandler.State.END), [set(offset, multiply(offset, value)), offset], multiply(offset, value));\n};\n\nexports.withScaleOffset = withScaleOffset;\n\nvar withOffset = function withOffset(value, state) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Value(0);\n  return cond(eq(state, _reactNativeGestureHandler.State.END), [set(offset, add(offset, value)), offset], add(offset, value));\n};\n\nexports.withOffset = withOffset;\n\nvar withSpring = function withSpring(props) {\n  var _offset$props = _objectSpread({\n    offset: new Value(0)\n  }, props),\n      value = _offset$props.value,\n      velocity = _offset$props.velocity,\n      state = _offset$props.state,\n      snapPoints = _offset$props.snapPoints,\n      offset = _offset$props.offset,\n      springConfig = _offset$props.config,\n      onSnap = _offset$props.onSnap;\n\n  var clock = new Clock();\n  var springState = {\n    finished: new Value(0),\n    velocity: new Value(0),\n    position: new Value(0),\n    time: new Value(0)\n  };\n\n  var config = _objectSpread({\n    toValue: new Value(0),\n    damping: 6,\n    mass: 1,\n    stiffness: 64,\n    overshootClamping: false,\n    restSpeedThreshold: 0.01,\n    restDisplacementThreshold: 0.01\n  }, springConfig);\n\n  var gestureAndAnimationIsOver = new Value(1);\n  var isSpringInterrupted = and(eq(state, _reactNativeGestureHandler.State.BEGAN), clockRunning(clock));\n  var finishSpring = [set(offset, springState.position), stopClock(clock), set(gestureAndAnimationIsOver, 1)];\n  var snap = onSnap ? [cond(clockRunning(clock), call([springState.position], onSnap))] : [];\n  return block([cond(isSpringInterrupted, finishSpring), cond(gestureAndAnimationIsOver, set(springState.position, offset)), cond(neq(state, _reactNativeGestureHandler.State.END), [set(gestureAndAnimationIsOver, 0), set(springState.finished, 0), set(springState.position, add(offset, value))]), cond(and(eq(state, _reactNativeGestureHandler.State.END), not(gestureAndAnimationIsOver)), [cond(and(not(clockRunning(clock)), not(springState.finished)), [set(springState.velocity, velocity), set(springState.time, 0), set(config.toValue, (0, _Animations.snapPoint)(springState.position, velocity, snapPoints)), startClock(clock)]), reSpring(clock, springState, config), cond(springState.finished, [].concat(snap, finishSpring))]), springState.position]);\n};\n\nexports.withSpring = withSpring;\n\nvar withDecay = function withDecay(config) {\n  var _offset$deceleration$ = _objectSpread({\n    offset: new Value(0),\n    deceleration: 0.998\n  }, config),\n      value = _offset$deceleration$.value,\n      velocity = _offset$deceleration$.velocity,\n      state = _offset$deceleration$.state,\n      offset = _offset$deceleration$.offset,\n      deceleration = _offset$deceleration$.deceleration;\n\n  var clock = new Clock();\n  var decayState = {\n    finished: new Value(0),\n    velocity: new Value(0),\n    position: new Value(0),\n    time: new Value(0)\n  };\n  var isDecayInterrupted = and(eq(state, _reactNativeGestureHandler.State.BEGAN), clockRunning(clock));\n  var finishDecay = [set(offset, decayState.position), stopClock(clock)];\n  return block([cond(isDecayInterrupted, finishDecay), cond(neq(state, _reactNativeGestureHandler.State.END), [set(decayState.finished, 0), set(decayState.position, add(offset, value))]), cond(eq(state, _reactNativeGestureHandler.State.END), [cond(and(not(clockRunning(clock)), not(decayState.finished)), [set(decayState.velocity, velocity), set(decayState.time, 0), startClock(clock)]), reDecay(clock, decayState, {\n    deceleration: deceleration\n  }), cond(decayState.finished, finishDecay)]), decayState.position]);\n};\n\nexports.withDecay = withDecay;\n\nvar onScrollEvent = function onScrollEvent(contentOffset) {\n  return event([{\n    nativeEvent: {\n      contentOffset: contentOffset\n    }\n  }]);\n};\n\nexports.onScrollEvent = onScrollEvent;\n\nvar onGestureEvent = function onGestureEvent(nativeEvent) {\n  var gestureEvent = event([{\n    nativeEvent: nativeEvent\n  }]);\n  return {\n    onHandlerStateChange: gestureEvent,\n    onGestureEvent: gestureEvent\n  };\n};\n\nexports.onGestureEvent = onGestureEvent;\n\nvar tapGestureHandler = function tapGestureHandler() {\n  var state = new Value(_reactNativeGestureHandler.State.UNDETERMINED);\n\n  var position = _Vectors.vec.createValue(0);\n\n  var absolutePosition = _Vectors.vec.createValue(0);\n\n  var gestureHandler = onGestureEvent({\n    state: state,\n    x: position.x,\n    y: position.y,\n    absoluteX: absolutePosition.x,\n    absoluteY: absolutePosition.y\n  });\n  return {\n    gestureHandler: gestureHandler,\n    position: position,\n    absolutePosition: absolutePosition,\n    state: state\n  };\n};\n\nexports.tapGestureHandler = tapGestureHandler;\n\nvar panGestureHandler = function panGestureHandler() {\n  var position = _Vectors.vec.createValue(0);\n\n  var translation = _Vectors.vec.createValue(0);\n\n  var velocity = _Vectors.vec.createValue(0);\n\n  var state = new Value(_reactNativeGestureHandler.State.UNDETERMINED);\n  var gestureHandler = onGestureEvent({\n    x: position.x,\n    translationX: translation.x,\n    velocityX: velocity.x,\n    y: position.y,\n    translationY: translation.y,\n    velocityY: velocity.y,\n    state: state\n  });\n  return {\n    position: position,\n    translation: translation,\n    velocity: velocity,\n    state: state,\n    gestureHandler: gestureHandler\n  };\n};\n\nexports.panGestureHandler = panGestureHandler;\n\nvar pinchGestureHandler = function pinchGestureHandler() {\n  var focal = _Vectors.vec.createValue(0, 0);\n\n  var scale = new Value(1);\n  var numberOfPointers = new Value(0);\n  var state = new Value(_reactNativeGestureHandler.State.UNDETERMINED);\n  var gestureHandler = onGestureEvent({\n    numberOfPointers: numberOfPointers,\n    focalX: focal.x,\n    focalY: focal.y,\n    scale: scale,\n    state: state\n  });\n  return {\n    numberOfPointers: numberOfPointers,\n    scale: scale,\n    state: state,\n    gestureHandler: gestureHandler,\n    focal: focal\n  };\n};\n\nexports.pinchGestureHandler = pinchGestureHandler;\n\nvar rotationGestureHandler = function rotationGestureHandler() {\n  var anchor = _Vectors.vec.createValue(0, 0);\n\n  var rotation = new Value(0);\n  var state = new Value(_reactNativeGestureHandler.State.UNDETERMINED);\n  var gestureHandler = onGestureEvent({\n    anchorX: anchor.x,\n    anchorY: anchor.y,\n    rotation: rotation,\n    state: state\n  });\n  return {\n    rotation: rotation,\n    state: state,\n    gestureHandler: gestureHandler,\n    anchor: anchor\n  };\n};\n\nexports.rotationGestureHandler = rotationGestureHandler;\n\nvar scrollHandler = function scrollHandler() {\n  var x = new Value(0);\n  var y = new Value(0);\n  var onScroll = onScrollEvent({\n    x: x,\n    y: y\n  });\n  return {\n    x: x,\n    y: y,\n    scrollHandler: {\n      onScroll: onScroll,\n      scrollEventThrottle: 1\n    }\n  };\n};\n\nexports.scrollHandler = scrollHandler;\n\nvar debugGestureState = function debugGestureState(label, state) {\n  var d = function d(value) {\n    return debug(label, new Value(value));\n  };\n\n  return onChange(state, cond(eq(state, _reactNativeGestureHandler.State.UNDETERMINED), d(\"UNDETERMINED\"), cond(eq(state, _reactNativeGestureHandler.State.BEGAN), d(\"BEGAN\"), cond(eq(state, _reactNativeGestureHandler.State.ACTIVE), d(\"ACTIVE\"), cond(eq(state, _reactNativeGestureHandler.State.END), d(\"END\"), cond(eq(state, _reactNativeGestureHandler.State.CANCELLED), d(\"CANCELLED\"), d(\"FAILED\")))))));\n};\n\nexports.debugGestureState = debugGestureState;","map":{"version":3,"sources":["Gesture.ts"],"names":["proc","Clock","Value","event","add","block","cond","eq","multiply","set","stopClock","and","not","clockRunning","startClock","neq","call","decay","reDecay","spring","reSpring","onChange","debug","Animated","pinchBegan","Platform","diff","State","pinchActive","pinchEnd","or","lessThan","withScaleOffset","offset","withOffset","withSpring","value","velocity","state","snapPoints","springConfig","onSnap","clock","springState","finished","position","time","config","toValue","damping","mass","stiffness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","gestureAndAnimationIsOver","isSpringInterrupted","finishSpring","snap","snapPoint","withDecay","deceleration","decayState","isDecayInterrupted","finishDecay","onScrollEvent","nativeEvent","contentOffset","onGestureEvent","gestureEvent","onHandlerStateChange","tapGestureHandler","vec","absolutePosition","gestureHandler","x","y","absoluteX","absoluteY","panGestureHandler","translation","translationX","velocityX","translationY","velocityY","pinchGestureHandler","focal","scale","numberOfPointers","focalX","focalY","rotationGestureHandler","anchor","rotation","anchorX","anchorY","scrollHandler","onScroll","scrollEventThrottle","debugGestureState","d"],"mappings":"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","sourcesContent":["import Animated, { diff, lessThan, or } from \"react-native-reanimated\";\nimport {\n  FlingGestureHandlerEventExtra,\n  ForceTouchGestureHandlerEventExtra,\n  GestureHandlerStateChangeNativeEvent,\n  LongPressGestureHandlerEventExtra,\n  PanGestureHandlerEventExtra,\n  PinchGestureHandlerEventExtra,\n  RotationGestureHandlerEventExtra,\n  State,\n  TapGestureHandlerEventExtra,\n} from \"react-native-gesture-handler\";\nimport { Platform } from \"react-native\";\n\nimport { snapPoint } from \"./Animations\";\nimport { vec } from \"./Vectors\";\n\nconst {\n  proc,\n  Clock,\n  Value,\n  event,\n  add,\n  block,\n  cond,\n  eq,\n  multiply,\n  set,\n  stopClock,\n  and,\n  not,\n  clockRunning,\n  startClock,\n  neq,\n  call,\n  decay: reDecay,\n  spring: reSpring,\n  onChange,\n  debug,\n} = Animated;\n\n// See: https://github.com/kmagiera/react-native-gesture-handler/issues/553\nexport const pinchBegan = proc((state: Animated.Node<State>) =>\n  Platform.OS === \"android\"\n    ? cond(eq(diff(state), State.ACTIVE - State.BEGAN), eq(state, State.ACTIVE))\n    : eq(state, State.BEGAN)\n);\n\nexport const pinchActive = proc(\n  (state: Animated.Node<State>, numberOfPointers: Animated.Node<number>) =>\n    and(\n      eq(state, State.ACTIVE),\n      eq(numberOfPointers, 2),\n      Platform.OS === \"android\" ? not(pinchBegan(state)) : 1\n    )\n);\n\nexport const pinchEnd = proc(\n  (state: Animated.Node<State>, numberOfPointers: Animated.Node<number>) =>\n    Platform.OS === \"android\"\n      ? or(eq(state, State.END), lessThan(numberOfPointers, 2))\n      : eq(state, State.END)\n);\n\nexport const withScaleOffset = (\n  value: Animated.Node<number>,\n  state: Animated.Node<State>,\n  offset: Animated.Value<number> = new Value(1)\n) =>\n  cond(\n    eq(state, State.END),\n    [set(offset, multiply(offset, value)), offset],\n    multiply(offset, value)\n  );\n\nexport const withOffset = (\n  value: Animated.Node<number>,\n  state: Animated.Node<State>,\n  offset: Animated.Value<number> = new Value(0)\n) =>\n  cond(\n    eq(state, State.END),\n    [set(offset, add(offset, value)), offset],\n    add(offset, value)\n  );\n\ninterface PrivateSpringConfig extends Animated.SpringConfig {\n  toValue: Animated.Value<number>;\n}\n\ntype SpringConfig = Omit<Animated.SpringConfig, \"toValue\">;\n\nexport interface WithSpringParams {\n  value: Animated.Adaptable<number>;\n  velocity: Animated.Adaptable<number>;\n  state: Animated.Node<State>;\n  snapPoints: Animated.Adaptable<number>[];\n  offset?: Animated.Value<number>;\n  config?: SpringConfig;\n  onSnap?: (value: readonly number[]) => void;\n}\n\nexport const withSpring = (props: WithSpringParams) => {\n  const {\n    value,\n    velocity,\n    state,\n    snapPoints,\n    offset,\n    config: springConfig,\n    onSnap,\n  } = {\n    offset: new Value(0),\n    ...props,\n  };\n  const clock = new Clock();\n  const springState: Animated.SpringState = {\n    finished: new Value(0),\n    velocity: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n  };\n\n  const config: PrivateSpringConfig = {\n    toValue: new Value(0),\n    damping: 6,\n    mass: 1,\n    stiffness: 64,\n    overshootClamping: false,\n    restSpeedThreshold: 0.01,\n    restDisplacementThreshold: 0.01,\n    ...springConfig,\n  };\n\n  const gestureAndAnimationIsOver = new Value(1);\n  const isSpringInterrupted = and(eq(state, State.BEGAN), clockRunning(clock));\n  const finishSpring = [\n    set(offset, springState.position),\n    stopClock(clock),\n    set(gestureAndAnimationIsOver, 1),\n  ];\n  const snap = onSnap\n    ? [cond(clockRunning(clock), call([springState.position], onSnap))]\n    : [];\n  return block([\n    cond(isSpringInterrupted, finishSpring),\n    cond(gestureAndAnimationIsOver, set(springState.position, offset)),\n    cond(neq(state, State.END), [\n      set(gestureAndAnimationIsOver, 0),\n      set(springState.finished, 0),\n      set(springState.position, add(offset, value)),\n    ]),\n    cond(and(eq(state, State.END), not(gestureAndAnimationIsOver)), [\n      cond(and(not(clockRunning(clock)), not(springState.finished)), [\n        set(springState.velocity, velocity),\n        set(springState.time, 0),\n        set(\n          config.toValue,\n          snapPoint(springState.position, velocity, snapPoints)\n        ),\n        startClock(clock),\n      ]),\n      reSpring(clock, springState, config),\n      cond(springState.finished, [...snap, ...finishSpring]),\n    ]),\n    springState.position,\n  ]);\n};\n\ninterface WithDecayParams {\n  value: Animated.Adaptable<number>;\n  velocity: Animated.Adaptable<number>;\n  state: Animated.Node<State>;\n  offset?: Animated.Value<number>;\n  deceleration?: number;\n}\n\nexport const withDecay = (config: WithDecayParams) => {\n  const { value, velocity, state, offset, deceleration } = {\n    offset: new Value(0),\n    deceleration: 0.998,\n    ...config,\n  };\n  const clock = new Clock();\n  const decayState = {\n    finished: new Value(0),\n    velocity: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n  };\n\n  const isDecayInterrupted = and(eq(state, State.BEGAN), clockRunning(clock));\n  const finishDecay = [set(offset, decayState.position), stopClock(clock)];\n\n  return block([\n    cond(isDecayInterrupted, finishDecay),\n    cond(neq(state, State.END), [\n      set(decayState.finished, 0),\n      set(decayState.position, add(offset, value)),\n    ]),\n    cond(eq(state, State.END), [\n      cond(and(not(clockRunning(clock)), not(decayState.finished)), [\n        set(decayState.velocity, velocity),\n        set(decayState.time, 0),\n        startClock(clock),\n      ]),\n      reDecay(clock, decayState, { deceleration }),\n      cond(decayState.finished, finishDecay),\n    ]),\n    decayState.position,\n  ]);\n};\n\nexport const onScrollEvent = (contentOffset: {\n  x?: Animated.Node<number>;\n  y?: Animated.Node<number>;\n}) =>\n  event([\n    {\n      nativeEvent: {\n        contentOffset,\n      },\n    },\n  ]);\n\ntype NativeEvent = GestureHandlerStateChangeNativeEvent &\n  (\n    | PanGestureHandlerEventExtra\n    | TapGestureHandlerEventExtra\n    | LongPressGestureHandlerEventExtra\n    | RotationGestureHandlerEventExtra\n    | FlingGestureHandlerEventExtra\n    | PinchGestureHandlerEventExtra\n    | ForceTouchGestureHandlerEventExtra\n  );\n\ntype Adaptable<T> = { [P in keyof T]: Animated.Adaptable<T[P]> };\n\nexport const onGestureEvent = (\n  nativeEvent: Partial<Adaptable<NativeEvent>>\n) => {\n  const gestureEvent = event([{ nativeEvent }]);\n  return {\n    onHandlerStateChange: gestureEvent,\n    onGestureEvent: gestureEvent,\n  };\n};\n\nexport const tapGestureHandler = () => {\n  const state = new Value(State.UNDETERMINED);\n  const position = vec.createValue(0);\n  const absolutePosition = vec.createValue(0);\n  const gestureHandler = onGestureEvent({\n    state,\n    x: position.x,\n    y: position.y,\n    absoluteX: absolutePosition.x,\n    absoluteY: absolutePosition.y,\n  });\n  return {\n    gestureHandler,\n    position,\n    absolutePosition,\n    state,\n  };\n};\n\nexport const panGestureHandler = () => {\n  const position = vec.createValue(0);\n  const translation = vec.createValue(0);\n  const velocity = vec.createValue(0);\n  const state = new Value(State.UNDETERMINED);\n  const gestureHandler = onGestureEvent({\n    x: position.x,\n    translationX: translation.x,\n    velocityX: velocity.x,\n    y: position.y,\n    translationY: translation.y,\n    velocityY: velocity.y,\n    state,\n  });\n  return {\n    position,\n    translation,\n    velocity,\n    state,\n    gestureHandler,\n  };\n};\n\nexport const pinchGestureHandler = () => {\n  const focal = vec.createValue(0, 0);\n  const scale = new Value(1);\n  const numberOfPointers = new Value(0);\n  const state = new Value(State.UNDETERMINED);\n  const gestureHandler = onGestureEvent({\n    numberOfPointers,\n    focalX: focal.x,\n    focalY: focal.y,\n    scale,\n    state,\n  });\n  return {\n    numberOfPointers,\n    scale,\n    state,\n    gestureHandler,\n    focal,\n  };\n};\n\nexport const rotationGestureHandler = () => {\n  const anchor = vec.createValue(0, 0);\n  const rotation = new Value(0);\n  const state = new Value(State.UNDETERMINED);\n  const gestureHandler = onGestureEvent({\n    anchorX: anchor.x,\n    anchorY: anchor.y,\n    rotation,\n    state,\n  });\n  return {\n    rotation,\n    state,\n    gestureHandler,\n    anchor,\n  };\n};\n\nexport const scrollHandler = () => {\n  const x = new Value(0);\n  const y = new Value(0);\n  const onScroll = onScrollEvent({ x, y });\n  return {\n    x,\n    y,\n    scrollHandler: {\n      onScroll,\n      scrollEventThrottle: 1,\n    },\n  };\n};\n\nexport const debugGestureState = (\n  label: string,\n  state: Animated.Node<State>\n) => {\n  const d = (value: string): Animated.Node<number> =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    debug(label, new Value(value));\n  return onChange(\n    state,\n    cond(\n      eq(state, State.UNDETERMINED),\n      d(\"UNDETERMINED\"),\n      cond(\n        eq(state, State.BEGAN),\n        d(\"BEGAN\"),\n        cond(\n          eq(state, State.ACTIVE),\n          d(\"ACTIVE\"),\n          cond(\n            eq(state, State.END),\n            d(\"END\"),\n            cond(eq(state, State.CANCELLED), d(\"CANCELLED\"), d(\"FAILED\"))\n          )\n        )\n      )\n    )\n  );\n};\n"]},"metadata":{},"sourceType":"script"}