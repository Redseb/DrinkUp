{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nvar _Array = require(\"../Array\");\n\nvar _Math = require(\"../Math\");\n\nvar Value = _reactNativeReanimated.default.Value,\n    and = _reactNativeReanimated.default.and,\n    cond = _reactNativeReanimated.default.cond,\n    divide = _reactNativeReanimated.default.divide,\n    add = _reactNativeReanimated.default.add,\n    multiply = _reactNativeReanimated.default.multiply,\n    block = _reactNativeReanimated.default.block,\n    greaterThan = _reactNativeReanimated.default.greaterThan,\n    eq = _reactNativeReanimated.default.eq,\n    lessThan = _reactNativeReanimated.default.lessThan,\n    pow = _reactNativeReanimated.default.pow,\n    sqrt = _reactNativeReanimated.default.sqrt,\n    set = _reactNativeReanimated.default.set,\n    sub = _reactNativeReanimated.default.sub,\n    cos = _reactNativeReanimated.default.cos,\n    not = _reactNativeReanimated.default.not,\n    acos = _reactNativeReanimated.default.acos;\n\nvar isRootValidForCubicBezier = function isRootValidForCubicBezier(root) {\n  return and(greaterThan(root, 0), lessThan(root, 1));\n};\n\nvar cuberoot = function cuberoot(v) {\n  return cond(lessThan(v, 0), multiply(pow(multiply(v, -1), 1 / 3), -1), pow(v, 1 / 3));\n};\n\nvar cubicBezierSolve = function cubicBezierSolve(pa, pb, pc, pd) {\n  var a = new Value();\n  var b = new Value();\n  var c = new Value();\n  var d = new Value();\n  var root1 = new Value();\n  var root2 = new Value();\n  var root3 = new Value();\n  var q = new Value();\n  var q2 = new Value();\n  var p = new Value();\n  var p3 = new Value();\n  var discriminant = new Value();\n  var mp3 = new Value();\n  var mp33 = new Value();\n  var r = new Value();\n  var t = new Value();\n  var cosphi = new Value();\n  var phi = new Value();\n  var crtr = new Value();\n  var t1 = new Value();\n  var u1 = new Value();\n  var sd = new Value();\n  var v1 = new Value();\n  var sq = new Value();\n  return block([set(a, add(multiply(3, pa), multiply(-6, pb), multiply(3, pc))), set(b, add(multiply(-3, pa), multiply(3, pb))), set(c, pa), set(d, add(multiply(-1, pa), multiply(3, pb), multiply(-3, pc), pd)), cond((0, _Math.approximates)(d, 0, 0.001), cond((0, _Math.approximates)(d, 0, 0.001), cond(not((0, _Math.approximates)(b, 0, 0.001)), set(root1, divide(multiply(-1, c), b)), [set(q, sqrt(sub(pow(b, 2), multiply(4, a, c)))), set(root1, divide(sub(q, b), multiply(2, a))), set(root2, divide(sub(multiply(b, -1), q), multiply(2, a)))])), [set(a, divide(a, d)), set(b, divide(b, d)), set(c, divide(c, d)), set(p, divide(sub(multiply(3, b), multiply(a, a)), 3)), set(p3, divide(p, 3)), set(q, divide(add(multiply(2, a, a, a), multiply(-9, a, b), multiply(27, c)), 27)), set(q2, divide(q, 2)), set(discriminant, add(multiply(q2, q2), multiply(p3, p3, p3))), cond(lessThan(discriminant, 0), [set(mp3, divide(multiply(p, -1), 3)), set(mp33, multiply(mp3, mp3, mp3)), set(r, sqrt(mp33)), set(t, divide(multiply(q, -1), multiply(2, r))), set(cosphi, cond(lessThan(t, -1), -1, cond(greaterThan(t, 1), 1, t))), set(phi, acos(cosphi)), set(crtr, cuberoot(r)), set(t1, multiply(2, crtr)), set(root1, sub(multiply(t1, cos(divide(phi, 3))), divide(a, 3))), set(root2, sub(multiply(t1, cos(divide(add(phi, 2 * Math.PI), 3))), divide(a, 3))), set(root3, sub(multiply(t1, cos(divide(add(phi, 4 * Math.PI), 3))), divide(a, 3)))], cond(eq(discriminant, 0), [set(u1, cond(lessThan(q2, 0), cuberoot(multiply(q2, -1)), multiply(cuberoot(q2), -1))), set(root1, sub(multiply(2, u1), divide(a, 3))), set(root2, sub(multiply(-1, u1), divide(a, 3)))], [set(sd, sqrt(discriminant)), set(u1, cuberoot(sub(sq, q2))), set(v1, cuberoot(add(sq, q2))), set(root1, sub(u1, v1, divide(a, 3)))]))]), (0, _Array.find)([root1, root2, root3], isRootValidForCubicBezier)]);\n};\n\nvar _default = cubicBezierSolve;\nexports.default = _default;","map":{"version":3,"sources":["CubicBezierSolve.ts"],"names":["Value","and","cond","divide","add","multiply","block","greaterThan","eq","lessThan","pow","sqrt","set","sub","cos","not","acos","Animated","isRootValidForCubicBezier","cuberoot","cubicBezierSolve","a","b","c","d","root1","root2","root3","q","q2","p","p3","discriminant","mp3","mp33","r","t","cosphi","phi","crtr","t1","u1","sd","v1","sq","approximates","Math","find"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { find } from \"../Array\";\nimport { approximates } from \"../Math\";\n\nconst {\n  Value,\n  and,\n  cond,\n  divide,\n  add,\n  multiply,\n  block,\n  greaterThan,\n  eq,\n  lessThan,\n  pow,\n  sqrt,\n  set,\n  sub,\n  cos,\n  not,\n  acos,\n} = Animated;\n\nconst isRootValidForCubicBezier = (root: Animated.Node<number>) =>\n  and(greaterThan(root, 0), lessThan(root, 1));\n\n// pomax.github.io/bezierinfo/#extremities\nconst cuberoot = (v: Animated.Adaptable<number>) =>\n  cond(\n    lessThan(v, 0),\n    multiply(pow(multiply(v, -1), 1 / 3), -1),\n    pow(v, 1 / 3)\n  );\n\nconst cubicBezierSolve = (\n  pa: Animated.Adaptable<number>,\n  pb: Animated.Adaptable<number>,\n  pc: Animated.Adaptable<number>,\n  pd: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const a: Animated.Value<number> = new Value();\n  const b: Animated.Value<number> = new Value();\n  const c: Animated.Value<number> = new Value();\n  const d: Animated.Value<number> = new Value();\n  const root1: Animated.Value<number> = new Value();\n  const root2: Animated.Value<number> = new Value();\n  const root3: Animated.Value<number> = new Value();\n\n  const q: Animated.Value<number> = new Value();\n  const q2: Animated.Value<number> = new Value();\n  const p: Animated.Value<number> = new Value();\n  const p3: Animated.Value<number> = new Value();\n  const discriminant: Animated.Value<number> = new Value();\n\n  const mp3: Animated.Value<number> = new Value();\n  const mp33: Animated.Value<number> = new Value();\n  const r: Animated.Value<number> = new Value();\n  const t: Animated.Value<number> = new Value();\n  const cosphi: Animated.Value<number> = new Value();\n  const phi: Animated.Value<number> = new Value();\n  const crtr: Animated.Value<number> = new Value();\n  const t1: Animated.Value<number> = new Value();\n\n  const u1: Animated.Value<number> = new Value();\n\n  const sd: Animated.Value<number> = new Value();\n  const v1: Animated.Value<number> = new Value();\n  const sq: Animated.Value<number> = new Value();\n\n  return block([\n    set(a, add(multiply(3, pa), multiply(-6, pb), multiply(3, pc))),\n    set(b, add(multiply(-3, pa), multiply(3, pb))),\n    set(c, pa),\n    set(d, add(multiply(-1, pa), multiply(3, pb), multiply(-3, pc), pd)),\n    cond(\n      approximates(d, 0, 0.001),\n      cond(\n        approximates(d, 0, 0.001),\n        cond(\n          not(approximates(b, 0, 0.001)),\n          set(root1, divide(multiply(-1, c), b)),\n          [\n            set(q, sqrt(sub(pow(b, 2), multiply(4, a, c)))),\n            set(root1, divide(sub(q, b), multiply(2, a))),\n            set(root2, divide(sub(multiply(b, -1), q), multiply(2, a))),\n          ]\n        )\n      ),\n      [\n        set(a, divide(a, d)),\n        set(b, divide(b, d)),\n        set(c, divide(c, d)),\n        set(p, divide(sub(multiply(3, b), multiply(a, a)), 3)),\n        set(p3, divide(p, 3)),\n        set(\n          q,\n          divide(\n            add(multiply(2, a, a, a), multiply(-9, a, b), multiply(27, c)),\n            27\n          )\n        ),\n        set(q2, divide(q, 2)),\n        set(discriminant, add(multiply(q2, q2), multiply(p3, p3, p3))),\n        cond(\n          lessThan(discriminant, 0),\n          [\n            set(mp3, divide(multiply(p, -1), 3)),\n            set(mp33, multiply(mp3, mp3, mp3)),\n            set(r, sqrt(mp33)),\n            set(t, divide(multiply(q, -1), multiply(2, r))),\n            set(\n              cosphi,\n              cond(lessThan(t, -1), -1, cond(greaterThan(t, 1), 1, t))\n            ),\n            set(phi, acos(cosphi)),\n            set(crtr, cuberoot(r)),\n            set(t1, multiply(2, crtr)),\n            set(root1, sub(multiply(t1, cos(divide(phi, 3))), divide(a, 3))),\n            set(\n              root2,\n              sub(\n                multiply(t1, cos(divide(add(phi, 2 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            ),\n            set(\n              root3,\n              sub(\n                multiply(t1, cos(divide(add(phi, 4 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            ),\n          ],\n          cond(\n            eq(discriminant, 0),\n            [\n              set(\n                u1,\n                cond(\n                  lessThan(q2, 0),\n                  cuberoot(multiply(q2, -1)),\n                  multiply(cuberoot(q2), -1)\n                )\n              ),\n              set(root1, sub(multiply(2, u1), divide(a, 3))),\n              set(root2, sub(multiply(-1, u1), divide(a, 3))),\n            ],\n            [\n              set(sd, sqrt(discriminant)),\n              set(u1, cuberoot(sub(sq, q2))),\n              set(v1, cuberoot(add(sq, q2))),\n              set(root1, sub(u1, v1, divide(a, 3))),\n            ]\n          )\n        ),\n      ]\n    ),\n    find([root1, root2, root3], isRootValidForCubicBezier),\n  ]);\n};\n\nexport default cubicBezierSolve;\n"]},"metadata":{},"sourceType":"script"}