{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.moduloTo = exports.divideTo = exports.multiplyTo = exports.subTo = exports.addTo = exports.snapPoint = exports.moving = exports.diffClamp = exports.diff = exports.tween2d = exports.smoothstep = exports.step = exports.mix = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _Math = require(\"./Math\");\n\nvar _Matrix = require(\"./Matrix3\");\n\nvar Value = _reactNativeReanimated.default.Value,\n    set = _reactNativeReanimated.default.set,\n    add = _reactNativeReanimated.default.add,\n    multiply = _reactNativeReanimated.default.multiply,\n    cond = _reactNativeReanimated.default.cond,\n    eq = _reactNativeReanimated.default.eq,\n    abs = _reactNativeReanimated.default.abs,\n    sub = _reactNativeReanimated.default.sub,\n    not = _reactNativeReanimated.default.not,\n    lessThan = _reactNativeReanimated.default.lessThan,\n    greaterThan = _reactNativeReanimated.default.greaterThan,\n    divide = _reactNativeReanimated.default.divide,\n    modulo = _reactNativeReanimated.default.modulo,\n    proc = _reactNativeReanimated.default.proc;\nvar mix = proc(function (value, x, y) {\n  return add(x, multiply(value, sub(y, x)));\n});\nexports.mix = mix;\nvar step = proc(function (value, edge) {\n  return lessThan(value, edge);\n});\nexports.step = step;\nvar smoothstep = proc(function (value, edge0, edge1) {\n  var t = (0, _Math.clamp)(divide(sub(value, edge0), sub(edge1, edge0)), 0, 1);\n  return multiply(t, t, sub(3, multiply(2, t)));\n});\nexports.smoothstep = smoothstep;\n\nvar tween2d = function tween2d(value, t1, t2) {\n  var d1 = (0, _Matrix.decompose2d)(t1);\n  var d2 = (0, _Matrix.decompose2d)(t2);\n  var translateX = mix(value, d1[0].translateX, d2[0].translateX);\n  var translateY = mix(value, d1[1].translateY, d2[1].translateY);\n  var skewX = mix(value, d1[2].rotateZ, d2[2].rotateZ);\n  var scaleX = mix(value, d1[3].scaleX, d2[3].scaleX);\n  var scaleY = mix(value, d1[4].scaleY, d2[4].scaleY);\n  var rotateZ = mix(value, d1[5].rotateZ, d2[5].rotateZ);\n  return [{\n    translateX: translateX\n  }, {\n    translateY: translateY\n  }, {\n    rotateZ: skewX\n  }, {\n    scaleX: scaleX\n  }, {\n    scaleY: scaleY\n  }, {\n    rotateZ: rotateZ\n  }];\n};\n\nexports.tween2d = tween2d;\n\nvar diff = function diff(v) {\n  var stash = new Value(0);\n  var prev = new Value();\n  return (0, _reactNativeReanimated.block)([set(stash, cond((0, _reactNativeReanimated.defined)(prev), sub(v, prev), 0)), set(prev, v), stash]);\n};\n\nexports.diff = diff;\n\nvar diffClamp = function diffClamp(a, minVal, maxVal) {\n  var value = new Value();\n  return set(value, (0, _Math.min)((0, _Math.max)(add(cond((0, _reactNativeReanimated.defined)(value), value, a), diff(a)), minVal), maxVal));\n};\n\nexports.diffClamp = diffClamp;\n\nvar moving = function moving(position) {\n  var minPositionDelta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;\n  var emptyFrameThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  var delta = diff(position);\n  var noMovementFrames = new Value(0);\n  return cond(lessThan(abs(delta), minPositionDelta), [set(noMovementFrames, add(noMovementFrames, 1)), not(greaterThan(noMovementFrames, emptyFrameThreshold))], [set(noMovementFrames, 0), 1]);\n};\n\nexports.moving = moving;\n\nvar snapPoint = function snapPoint(value, velocity, points) {\n  var point = add(value, multiply(0.2, velocity));\n\n  var diffPoint = function diffPoint(p) {\n    return abs(sub(point, p));\n  };\n\n  var deltas = points.map(function (p) {\n    return diffPoint(p);\n  });\n\n  var minDelta = _Math.min.apply(void 0, (0, _toConsumableArray2.default)(deltas));\n\n  return points.reduce(function (acc, p) {\n    return cond(eq(diffPoint(p), minDelta), p, acc);\n  }, new Value());\n};\n\nexports.snapPoint = snapPoint;\nvar addTo = proc(function (value, node) {\n  return set(value, add(value, node));\n});\nexports.addTo = addTo;\nvar subTo = proc(function (value, node) {\n  return set(value, sub(value, node));\n});\nexports.subTo = subTo;\nvar multiplyTo = proc(function (value, node) {\n  return set(value, multiply(value, node));\n});\nexports.multiplyTo = multiplyTo;\nvar divideTo = proc(function (value, node) {\n  return set(value, divide(value, node));\n});\nexports.divideTo = divideTo;\nvar moduloTo = proc(function (value, node) {\n  return set(value, modulo(value, node));\n});\nexports.moduloTo = moduloTo;","map":{"version":3,"sources":["Animations.ts"],"names":["Value","set","add","multiply","cond","eq","abs","sub","not","lessThan","greaterThan","divide","modulo","proc","Animated","mix","step","smoothstep","t","clamp","tween2d","d1","decompose2d","d2","translateX","translateY","skewX","scaleX","scaleY","rotateZ","diff","stash","prev","block","defined","diffClamp","value","min","max","moving","minPositionDelta","emptyFrameThreshold","delta","noMovementFrames","snapPoint","point","diffPoint","deltas","points","minDelta","addTo","subTo","multiplyTo","divideTo","moduloTo"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AAGEA,IAAAA,K,GAcEc,+BAdFd,KAAAA;AAAAA,IACAC,G,GAaEa,+BAbFb,GADAD;AAAAA,IAEAE,G,GAYEY,+BAZFZ,GAFAF;AAAAA,IAGAG,Q,GAWEW,+BAXFX,QAHAH;AAAAA,IAIAI,I,GAUEU,+BAVFV,IAJAJ;AAAAA,IAKAK,E,GASES,+BATFT,EALAL;AAAAA,IAMAM,G,GAQEQ,+BARFR,GANAN;AAAAA,IAOAO,G,GAOEO,+BAPFP,GAPAP;AAAAA,IAQAQ,G,GAMEM,+BANFN,GARAR;AAAAA,IASAS,Q,GAKEK,+BALFL,QATAT;AAAAA,IAUAU,W,GAIEI,+BAJFJ,WAVAV;AAAAA,IAWAW,M,GAGEG,+BAHFH,MAXAX;AAAAA,IAYAY,M,GAEEE,+BAFFF,MAZAZ;AAAAA,IAaAa,I,GACEC,+BADFD,IAbAb;AAmBK,IAAMe,GAAG,GAAGF,IAAI,CACrB,UAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,SAIKX,GAAG,CAAA,CAAA,EAAIC,QAAQ,CAAA,KAAA,EAAQI,GAAG,CAAA,CAAA,EAJ/B,CAI+B,CAAX,CAAZ,CAJR;AADK,CAAgB,CAAhB;;AAQA,IAAMS,IAAI,GAAGH,IAAI,CACtB,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEJ,QAAQ,CAAA,KAAA,EADV,IACU,CADV;AADK,CAAiB,CAAjB;;AAKA,IAAMQ,UAAU,GAAGJ,IAAI,CAC5B,UAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAIK;AACH,MAAMK,CAAC,GAAGC,iBAAMR,MAAM,CAACJ,GAAG,CAAA,KAAA,EAAJ,KAAI,CAAJ,EAAoBA,GAAG,CAAA,KAAA,EAA9B,KAA8B,CAAvB,CAAZY,EAAK,CAALA,EAAV,CAAUA,CAAV;AACA,SAAOhB,QAAQ,CAAA,CAAA,EAAA,CAAA,EAAOI,GAAG,CAAA,CAAA,EAAIJ,QAAQ,CAAA,CAAA,EAArC,CAAqC,CAAZ,CAAV,CAAf;AAPG,CAAuB,CAAvB;;;AAWA,IAAMiB,OAAO,GAAPA,SAAAA,OAAAA,CAAU,KAAVA,EAAU,EAAVA,EAAU,EAAVA,EAIR;AACH,MAAMC,EAAE,GAAGC,yBAAX,EAAWA,CAAX;AACA,MAAMC,EAAE,GAAGD,yBAAX,EAAWA,CAAX;AACA,MAAME,UAAU,GAAGT,GAAG,CAAA,KAAA,EAAQM,EAAE,CAAFA,CAAE,CAAFA,CAAR,UAAA,EAA0BE,EAAE,CAAFA,CAAE,CAAFA,CAAhD,UAAsB,CAAtB;AACA,MAAME,UAAU,GAAGV,GAAG,CAAA,KAAA,EAAQM,EAAE,CAAFA,CAAE,CAAFA,CAAR,UAAA,EAA0BE,EAAE,CAAFA,CAAE,CAAFA,CAAhD,UAAsB,CAAtB;AACA,MAAMG,KAAK,GAAGX,GAAG,CAAA,KAAA,EAAQM,EAAE,CAAFA,CAAE,CAAFA,CAAR,OAAA,EAAuBE,EAAE,CAAFA,CAAE,CAAFA,CAAxC,OAAiB,CAAjB;AACA,MAAMI,MAAM,GAAGZ,GAAG,CAAA,KAAA,EAAQM,EAAE,CAAFA,CAAE,CAAFA,CAAR,MAAA,EAAsBE,EAAE,CAAFA,CAAE,CAAFA,CAAxC,MAAkB,CAAlB;AACA,MAAMK,MAAM,GAAGb,GAAG,CAAA,KAAA,EAAQM,EAAE,CAAFA,CAAE,CAAFA,CAAR,MAAA,EAAsBE,EAAE,CAAFA,CAAE,CAAFA,CAAxC,MAAkB,CAAlB;AACA,MAAMM,OAAO,GAAGd,GAAG,CAAA,KAAA,EAAQM,EAAE,CAAFA,CAAE,CAAFA,CAAR,OAAA,EAAuBE,EAAE,CAAFA,CAAE,CAAFA,CAA1C,OAAmB,CAAnB;AACA,SAAO,CACL;AAAEC,IAAAA,UAAU,EADP;AACL,GADK,EAEL;AAAEC,IAAAA,UAAU,EAFP;AAEL,GAFK,EAGL;AAAEI,IAAAA,OAAO,EAHJ;AAGL,GAHK,EAIL;AAAEF,IAAAA,MAAM,EAJH;AAIL,GAJK,EAKL;AAAEC,IAAAA,MAAM,EALH;AAKL,GALK,EAML;AAAEC,IAAAA,OAAO,EANX;AAME,GANK,CAAP;AAbK,CAAA;;;;AAwBA,IAAMC,IAAI,GAAJA,SAAAA,IAAAA,CAAO,CAAPA,EAAqC;AAChD,MAAMC,KAAK,GAAG,IAAA,KAAA,CAAd,CAAc,CAAd;AACA,MAAMC,IAAI,GAAG,IAAb,KAAa,EAAb;AACA,SAAOC,kCAAM,CACXhC,GAAG,CAAA,KAAA,EAAQG,IAAI,CAAC8B,oCAAD,IAACA,CAAD,EAAgB3B,GAAG,CAAA,CAAA,EAAnB,IAAmB,CAAnB,EADJ,CACI,CAAZ,CADQ,EAEXN,GAAG,CAAA,IAAA,EAFQ,CAER,CAFQ,EAAb,KAAa,CAANgC,CAAP;AAHK,CAAA;;;;AAUA,IAAME,SAAS,GAATA,SAAAA,SAAAA,CAAY,CAAZA,EAAY,MAAZA,EAAY,MAAZA,EAIR;AACH,MAAMC,KAAK,GAAG,IAAd,KAAc,EAAd;AACA,SAAOnC,GAAG,CAAA,KAAA,EAERoC,eAAIC,eAAIpC,GAAG,CAACE,IAAI,CAAC8B,oCAAD,KAACA,CAAD,EAAA,KAAA,EAAL,CAAK,CAAL,EAAiCJ,IAAI,CAAzC,CAAyC,CAArC,CAAPQ,EAAD,MAACA,CAAJD,EAFF,MAEEA,CAFQ,CAAV;AANK,CAAA;;;;AAYA,IAAME,MAAM,GAANA,SAAAA,MAAAA,CAAS,QAATA,EAIR;AAFHC,MAAAA,gBAEG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAFgB,IAAnBA;AACAC,MAAAA,mBACG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADmB,CAAtBA;AAEA,MAAMC,KAAK,GAAGZ,IAAI,CAAlB,QAAkB,CAAlB;AACA,MAAMa,gBAAgB,GAAG,IAAA,KAAA,CAAzB,CAAyB,CAAzB;AACA,SAAOvC,IAAI,CACTK,QAAQ,CAACH,GAAG,CAAJ,KAAI,CAAJ,EADC,gBACD,CADC,EAET,CACEL,GAAG,CAAA,gBAAA,EAAmBC,GAAG,CAAA,gBAAA,EAD3B,CAC2B,CAAtB,CADL,EAEEM,GAAG,CAACE,WAAW,CAAA,gBAAA,EAJR,mBAIQ,CAAZ,CAFL,CAFS,EAMT,CAACT,GAAG,CAAA,gBAAA,EAAJ,CAAI,CAAJ,EANF,CAME,CANS,CAAX;AAPK,CAAA;;;;AAiBA,IAAM2C,SAAS,GAATA,SAAAA,SAAAA,CAAY,KAAZA,EAAY,QAAZA,EAAY,MAAZA,EAIR;AACH,MAAMC,KAAK,GAAG3C,GAAG,CAAA,KAAA,EAAQC,QAAQ,CAAA,GAAA,EAAjC,QAAiC,CAAhB,CAAjB;;AACA,MAAM2C,SAAS,GAATA,SAAAA,SAAAA,CAAY,CAAZA,EAAY;AAAA,WAAmCxC,GAAG,CAACC,GAAG,CAAA,KAAA,EAA1C,CAA0C,CAAJ,CAAtC;AAAlB,GAAA;;AACA,MAAMwC,MAAM,GAAGC,MAAM,CAANA,GAAAA,CAAW,UAAA,CAAA,EAAA;AAAA,WAAOF,SAAS,CAAhB,CAAgB,CAAhB;AAA1B,GAAeE,CAAf;;AACA,MAAMC,QAAQ,GAAGZ,UAAAA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,iCAAjB,MAAiBA,CAAAA,CAAjB;;AACA,SAAOW,MAAM,CAANA,MAAAA,CACL,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,WAAY5C,IAAI,CAACC,EAAE,CAACyC,SAAS,CAAV,CAAU,CAAV,EAAH,QAAG,CAAH,EAAA,CAAA,EAAhB,GAAgB,CAAhB;AADKE,GAAAA,EAEL,IAFF,KAEE,EAFKA,CAAP;AATK,CAAA;;;AAeA,IAAME,KAAK,GAAGrC,IAAI,CACvB,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEZ,GAAG,CAAA,KAAA,EAAQC,GAAG,CAAA,KAAA,EADhB,IACgB,CAAX,CADL;AADK,CAAkB,CAAlB;;AAKA,IAAMiD,KAAK,GAAGtC,IAAI,CACvB,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEZ,GAAG,CAAA,KAAA,EAAQM,GAAG,CAAA,KAAA,EADhB,IACgB,CAAX,CADL;AADK,CAAkB,CAAlB;;AAKA,IAAM6C,UAAU,GAAGvC,IAAI,CAC5B,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEZ,GAAG,CAAA,KAAA,EAAQE,QAAQ,CAAA,KAAA,EADrB,IACqB,CAAhB,CADL;AADK,CAAuB,CAAvB;;AAKA,IAAMkD,QAAQ,GAAGxC,IAAI,CAC1B,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEZ,GAAG,CAAA,KAAA,EAAQU,MAAM,CAAA,KAAA,EADnB,IACmB,CAAd,CADL;AADK,CAAqB,CAArB;;AAKA,IAAM2C,QAAQ,GAAGzC,IAAI,CAC1B,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEZ,GAAG,CAAA,KAAA,EAAQW,MAAM,CAAA,KAAA,EADnB,IACmB,CAAd,CADL;AADK,CAAqB,CAArB","sourcesContent":["import Animated, { block, defined } from \"react-native-reanimated\";\n\nimport { clamp, max, min } from \"./Math\";\nimport { Matrix3, Transforms2d, decompose2d } from \"./Matrix3\";\n\nconst {\n  Value,\n  set,\n  add,\n  multiply,\n  cond,\n  eq,\n  abs,\n  sub,\n  not,\n  lessThan,\n  greaterThan,\n  divide,\n  modulo,\n  proc,\n} = Animated;\n\nexport type SpringConfig = Partial<Omit<Animated.SpringConfig, \"toValue\">>;\nexport type TimingConfig = Partial<Omit<Animated.TimingConfig, \"toValue\">>;\n\nexport const mix = proc(\n  (\n    value: Animated.Adaptable<number>,\n    x: Animated.Adaptable<number>,\n    y: Animated.Adaptable<number>\n  ) => add(x, multiply(value, sub(y, x)))\n);\n\nexport const step = proc(\n  (value: Animated.Adaptable<number>, edge: Animated.Adaptable<number>) =>\n    lessThan(value, edge)\n);\n\nexport const smoothstep = proc(\n  (\n    value: Animated.Adaptable<number>,\n    edge0: Animated.Adaptable<number>,\n    edge1: Animated.Adaptable<number>\n  ) => {\n    const t = clamp(divide(sub(value, edge0), sub(edge1, edge0)), 0, 1);\n    return multiply(t, t, sub(3, multiply(2, t)));\n  }\n);\n\nexport const tween2d = (\n  value: Animated.Node<number>,\n  t1: Matrix3 | Transforms2d,\n  t2: Matrix3 | Transforms2d\n) => {\n  const d1 = decompose2d(t1);\n  const d2 = decompose2d(t2);\n  const translateX = mix(value, d1[0].translateX, d2[0].translateX);\n  const translateY = mix(value, d1[1].translateY, d2[1].translateY);\n  const skewX = mix(value, d1[2].rotateZ, d2[2].rotateZ);\n  const scaleX = mix(value, d1[3].scaleX, d2[3].scaleX);\n  const scaleY = mix(value, d1[4].scaleY, d2[4].scaleY);\n  const rotateZ = mix(value, d1[5].rotateZ, d2[5].rotateZ);\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: skewX },\n    { scaleX },\n    { scaleY },\n    { rotateZ },\n  ] as const;\n};\n\n// currently diffClamp() from reanimated seems currently buggy because of proc()\nexport const diff = (v: Animated.Node<number>) => {\n  const stash = new Value(0);\n  const prev = new Value<number>();\n  return block([\n    set(stash, cond(defined(prev), sub(v, prev), 0)),\n    set(prev, v),\n    stash,\n  ]);\n};\n\nexport const diffClamp = (\n  a: Animated.Node<number>,\n  minVal: Animated.Adaptable<number>,\n  maxVal: Animated.Adaptable<number>\n) => {\n  const value = new Value<number>();\n  return set(\n    value,\n    min(max(add(cond(defined(value), value, a), diff(a)), minVal), maxVal)\n  );\n};\n\nexport const moving = (\n  position: Animated.Node<number>,\n  minPositionDelta = 1e-3,\n  emptyFrameThreshold = 5\n) => {\n  const delta = diff(position);\n  const noMovementFrames = new Value(0);\n  return cond(\n    lessThan(abs(delta), minPositionDelta),\n    [\n      set(noMovementFrames, add(noMovementFrames, 1)),\n      not(greaterThan(noMovementFrames, emptyFrameThreshold)),\n    ],\n    [set(noMovementFrames, 0), 1]\n  );\n};\n\nexport const snapPoint = (\n  value: Animated.Adaptable<number>,\n  velocity: Animated.Adaptable<number>,\n  points: Animated.Adaptable<number>[]\n) => {\n  const point = add(value, multiply(0.2, velocity));\n  const diffPoint = (p: Animated.Adaptable<number>) => abs(sub(point, p));\n  const deltas = points.map((p) => diffPoint(p));\n  const minDelta = min(...deltas);\n  return points.reduce(\n    (acc, p) => cond(eq(diffPoint(p), minDelta), p, acc),\n    new Value()\n  ) as Animated.Node<number>;\n};\n\nexport const addTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, add(value, node))\n);\n\nexport const subTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, sub(value, node))\n);\n\nexport const multiplyTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, multiply(value, node))\n);\n\nexport const divideTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, divide(value, node))\n);\n\nexport const moduloTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, modulo(value, node))\n);\n"]},"metadata":{},"sourceType":"script"}