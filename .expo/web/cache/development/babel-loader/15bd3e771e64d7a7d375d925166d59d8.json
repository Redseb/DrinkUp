{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.canvas2Polar = exports.polar2Canvas = exports.polar2Cartesian = exports.cartesian2Polar = exports.cartesian2Canvas = exports.canvas2Cartesian = void 0;\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nvar _Math = require(\"./Math\");\n\nvar sub = _reactNativeReanimated.default.sub,\n    multiply = _reactNativeReanimated.default.multiply,\n    add = _reactNativeReanimated.default.add,\n    cos = _reactNativeReanimated.default.cos,\n    sin = _reactNativeReanimated.default.sin,\n    pow = _reactNativeReanimated.default.pow,\n    sqrt = _reactNativeReanimated.default.sqrt;\n\nvar canvas2Cartesian = function canvas2Cartesian(_ref, center) {\n  var x = _ref.x,\n      y = _ref.y;\n  return {\n    x: sub(x, center.x),\n    y: multiply(sub(y, center.y), -1)\n  };\n};\n\nexports.canvas2Cartesian = canvas2Cartesian;\n\nvar cartesian2Canvas = function cartesian2Canvas(_ref2, center) {\n  var x = _ref2.x,\n      y = _ref2.y;\n  return {\n    x: add(x, center.x),\n    y: add(multiply(y, -1), center.y)\n  };\n};\n\nexports.cartesian2Canvas = cartesian2Canvas;\n\nvar cartesian2Polar = function cartesian2Polar(_ref3) {\n  var x = _ref3.x,\n      y = _ref3.y;\n  return {\n    theta: (0, _Math.atan2)(y, x),\n    radius: sqrt(add(pow(x, 2), pow(y, 2)))\n  };\n};\n\nexports.cartesian2Polar = cartesian2Polar;\n\nvar polar2Cartesian = function polar2Cartesian(_ref4) {\n  var theta = _ref4.theta,\n      radius = _ref4.radius;\n  return {\n    x: multiply(radius, cos(theta)),\n    y: multiply(radius, sin(theta))\n  };\n};\n\nexports.polar2Cartesian = polar2Cartesian;\n\nvar polar2Canvas = function polar2Canvas(_ref5, center) {\n  var theta = _ref5.theta,\n      radius = _ref5.radius;\n  return cartesian2Canvas(polar2Cartesian({\n    theta: theta,\n    radius: radius\n  }), center);\n};\n\nexports.polar2Canvas = polar2Canvas;\n\nvar canvas2Polar = function canvas2Polar(_ref6, center) {\n  var x = _ref6.x,\n      y = _ref6.y;\n  return cartesian2Polar(canvas2Cartesian({\n    x: x,\n    y: y\n  }, center));\n};\n\nexports.canvas2Polar = canvas2Polar;","map":{"version":3,"sources":["Coordinates.ts"],"names":["sub","multiply","add","cos","sin","pow","sqrt","Animated","canvas2Cartesian","x","y","center","cartesian2Canvas","cartesian2Polar","theta","atan2","radius","polar2Cartesian","polar2Canvas","canvas2Polar"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { atan2 } from \"./Math\";\nimport { Vector } from \"./Vectors\";\n\nconst { sub, multiply, add, cos, sin, pow, sqrt } = Animated;\n\nexport interface PolarPoint {\n  theta: Animated.Adaptable<number>;\n  radius: Animated.Adaptable<number>;\n}\n\nexport const canvas2Cartesian = ({ x, y }: Vector, center: Vector) => {\n  return {\n    x: sub(x, center.x),\n    y: multiply(sub(y, center.y), -1),\n  };\n};\n\nexport const cartesian2Canvas = ({ x, y }: Vector, center: Vector) => ({\n  x: add(x, center.x),\n  y: add(multiply(y, -1), center.y),\n});\n\nexport const cartesian2Polar = ({ x, y }: Vector) => {\n  return {\n    theta: atan2(y, x),\n    radius: sqrt(add(pow(x, 2), pow(y, 2))),\n  };\n};\n\nexport const polar2Cartesian = ({ theta, radius }: PolarPoint) => ({\n  x: multiply(radius, cos(theta)),\n  y: multiply(radius, sin(theta)),\n});\n\nexport const polar2Canvas = ({ theta, radius }: PolarPoint, center: Vector) =>\n  cartesian2Canvas(polar2Cartesian({ theta, radius }), center);\n\nexport const canvas2Polar = ({ x, y }: Vector, center: Vector) =>\n  cartesian2Polar(canvas2Cartesian({ x, y }, center));\n"]},"metadata":{},"sourceType":"script"}