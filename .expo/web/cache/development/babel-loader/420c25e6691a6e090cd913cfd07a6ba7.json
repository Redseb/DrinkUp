{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOrReuseStyleNode = createOrReuseStyleNode;\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _AnimatedTransform = require(\"./AnimatedTransform\");\n\nvar _areEqual = _interopRequireDefault(require(\"fbjs/lib/areEqual\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction sanitizeStyle(inputStyle) {\n  var style;\n\n  for (var key in inputStyle) {\n    var value = inputStyle[key];\n\n    if (value instanceof _AnimatedNode2.default) {\n      if (style === undefined) {\n        style = {};\n      }\n\n      style[key] = value.__nodeID;\n    }\n  }\n\n  return style;\n}\n\nfunction createOrReuseStyleNode(style, oldNode) {\n  style = _reactNative.StyleSheet.flatten(style) || {};\n\n  if (style.transform) {\n    var transform = (0, _AnimatedTransform.createOrReuseTransformNode)(style.transform, oldNode && oldNode._style.transform);\n\n    if (transform) {\n      style = _objectSpread(_objectSpread({}, style), {}, {\n        transform: transform\n      });\n    }\n  }\n\n  var config = sanitizeStyle(style);\n\n  if (config === undefined) {\n    return undefined;\n  }\n\n  if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedStyle(style, config);\n}\n\nvar AnimatedStyle = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedStyle, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedStyle);\n\n  function AnimatedStyle(style, config) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedStyle);\n    _this = _super.call(this, {\n      type: 'style',\n      style: config\n    }, Object.values(style));\n    _this._config = config;\n    _this._style = style;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedStyle, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedStyle, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"_walkStyleAndGetAnimatedValues\",\n    value: function _walkStyleAndGetAnimatedValues(style) {\n      var updatedStyle = {};\n\n      for (var key in style) {\n        var value = style[key];\n\n        if (value instanceof _AnimatedNode2.default) {\n          updatedStyle[key] = value.__getValue();\n        } else if (value && !Array.isArray(value) && typeof value === 'object') {\n          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n        }\n      }\n\n      return updatedStyle;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._walkStyleAndGetAnimatedValues(this._style);\n    }\n  }]);\n  return AnimatedStyle;\n}(_AnimatedNode2.default);\n\nexports.default = AnimatedStyle;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-reanimated/src/core/AnimatedStyle.js"],"names":["sanitizeStyle","inputStyle","style","key","value","AnimatedNode","undefined","__nodeID","createOrReuseStyleNode","oldNode","StyleSheet","flatten","transform","_style","config","_config","AnimatedStyle","type","Object","values","updatedStyle","__getValue","Array","isArray","_walkStyleAndGetAnimatedValues"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;;;;;;;AAEA,SAASA,aAAT,CAAuBC,UAAvB,EAAmC;AACjC,MAAIC,KAAJ;;AACA,OAAK,IAAMC,GAAX,IAAkBF,UAAlB,EAA8B;AAC5B,QAAMG,KAAK,GAAGH,UAAU,CAACE,GAAD,CAAxB;;AACA,QAAIC,KAAK,YAAYC,sBAArB,EAAmC;AACjC,UAAIH,KAAK,KAAKI,SAAd,EAAyB;AACvBJ,QAAAA,KAAK,GAAG,EAAR;AACD;;AACDA,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaC,KAAK,CAACG,QAAnB;AACD;AACF;;AACD,SAAOL,KAAP;AACD;;AAEM,SAASM,sBAAT,CAAgCN,KAAhC,EAAuCO,OAAvC,EAAgD;AACrDP,EAAAA,KAAK,GAAGQ,wBAAWC,OAAX,CAAmBT,KAAnB,KAA6B,EAArC;;AACA,MAAIA,KAAK,CAACU,SAAV,EAAqB;AACnB,QAAMA,SAAS,GAAG,mDAChBV,KAAK,CAACU,SADU,EAEhBH,OAAO,IAAIA,OAAO,CAACI,MAAR,CAAeD,SAFV,CAAlB;;AAIA,QAAIA,SAAJ,EAAe;AACbV,MAAAA,KAAK,mCACAA,KADA;AAEHU,QAAAA,SAAS,EAATA;AAFG,QAAL;AAID;AACF;;AACD,MAAME,MAAM,GAAGd,aAAa,CAACE,KAAD,CAA5B;;AACA,MAAIY,MAAM,KAAKR,SAAf,EAA0B;AACxB,WAAOA,SAAP;AACD;;AACD,MAAIG,OAAO,IAAI,uBAAUK,MAAV,EAAkBL,OAAO,CAACM,OAA1B,CAAf,EAAmD;AACjD,WAAON,OAAP;AACD;;AACD,SAAO,IAAIO,aAAJ,CAAkBd,KAAlB,EAAyBY,MAAzB,CAAP;AACD;;IAMoBE,a;;;;;AACnB,yBAAYd,KAAZ,EAAmBY,MAAnB,EAA2B;AAAA;;AAAA;AACzB,8BAAM;AAAEG,MAAAA,IAAI,EAAE,OAAR;AAAiBf,MAAAA,KAAK,EAAEY;AAAxB,KAAN,EAAwCI,MAAM,CAACC,MAAP,CAAcjB,KAAd,CAAxC;AACA,UAAKa,OAAL,GAAeD,MAAf;AACA,UAAKD,MAAL,GAAcX,KAAd;AAHyB;AAI1B;;;;+BAEU;AACT,qCAA6B,KAAKK,QAAlC;AACD;;;mDAE8BL,K,EAAO;AACpC,UAAMkB,YAAY,GAAG,EAArB;;AACA,WAAK,IAAMjB,GAAX,IAAkBD,KAAlB,EAAyB;AACvB,YAAME,KAAK,GAAGF,KAAK,CAACC,GAAD,CAAnB;;AACA,YAAIC,KAAK,YAAYC,sBAArB,EAAmC;AACjCe,UAAAA,YAAY,CAACjB,GAAD,CAAZ,GAAoBC,KAAK,CAACiB,UAAN,EAApB;AACD,SAFD,MAEO,IAAIjB,KAAK,IAAI,CAACkB,KAAK,CAACC,OAAN,CAAcnB,KAAd,CAAV,IAAkC,OAAOA,KAAP,KAAiB,QAAvD,EAAiE;AAEtEgB,UAAAA,YAAY,CAACjB,GAAD,CAAZ,GAAoB,KAAKqB,8BAAL,CAAoCpB,KAApC,CAApB;AACD;AACF;;AACD,aAAOgB,YAAP;AACD;;;mCAEc;AACb,aAAO,KAAKI,8BAAL,CAAoC,KAAKX,MAAzC,CAAP;AACD;;;EA3BwCR,sB","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport { createOrReuseTransformNode } from './AnimatedTransform';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  let style;\n  for (const key in inputStyle) {\n    const value = inputStyle[key];\n    if (value instanceof AnimatedNode) {\n      if (style === undefined) {\n        style = {};\n      }\n      style[key] = value.__nodeID;\n    }\n  }\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n  if (style.transform) {\n    const transform = createOrReuseTransformNode(\n      style.transform,\n      oldNode && oldNode._style.transform\n    );\n    if (transform) {\n      style = {\n        ...style,\n        transform,\n      };\n    }\n  }\n  const config = sanitizeStyle(style);\n  if (config === undefined) {\n    return undefined;\n  }\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedStyle(style, config);\n}\n\n/**\n * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode\n * in order to make a new instance of this node.\n */\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({ type: 'style', style: config }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  toString() {\n    return `AnimatedStyle, id: ${this.__nodeID}`;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}