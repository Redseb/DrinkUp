{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _unitlessNumbers = _interopRequireDefault(require(\"../../../modules/unitlessNumbers\"));\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(_unitlessNumbers.default.hasOwnProperty(name) && _unitlessNumbers.default[name])) {\n    return value + 'px';\n  }\n\n  return ('' + value).trim();\n}\n\nvar _default = dangerousStyleValue;\nexports.default = _default;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-web/dist/vendor/react-dom/dangerousStyleValue/index.js"],"names":["dangerousStyleValue","name","value","isCustomProperty","isEmpty","isUnitlessNumber","hasOwnProperty","trim"],"mappings":";;;;;;;AAWA;;AAWA,SAASA,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,gBAA1C,EAA4D;AAU1D,MAAIC,OAAO,GAAGF,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAlC,IAA+CA,KAAK,KAAK,EAAvE;;AAEA,MAAIE,OAAJ,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAI,CAACD,gBAAD,IAAqB,OAAOD,KAAP,KAAiB,QAAtC,IAAkDA,KAAK,KAAK,CAA5D,IAAiE,EAAEG,yBAAiBC,cAAjB,CAAgCL,IAAhC,KAAyCI,yBAAiBJ,IAAjB,CAA3C,CAArE,EAAyI;AACvI,WAAOC,KAAK,GAAG,IAAf;AACD;;AAED,SAAO,CAAC,KAAKA,KAAN,EAAaK,IAAb,EAAP;AACD;;eAEcP,mB","sourcesContent":["/* eslint-disable */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n * \n */\nimport isUnitlessNumber from '../../../modules/unitlessNumbers';\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n}\n\nexport default dangerousStyleValue;"]},"metadata":{},"sourceType":"script"}