{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar MapperRegistry = function () {\n  function MapperRegistry(module) {\n    (0, _classCallCheck2.default)(this, MapperRegistry);\n    this.sortedMappers = [];\n    this.mappers = new Map();\n    this.updatedSinceLastExecute = false;\n    this._module = module;\n  }\n\n  (0, _createClass2.default)(MapperRegistry, [{\n    key: \"startMapper\",\n    value: function startMapper(mapper) {\n      this.mappers.set(mapper.id, mapper);\n      this.updatedSinceLastExecute = true;\n      return mapper.id;\n    }\n  }, {\n    key: \"stopMapper\",\n    value: function stopMapper(id) {\n      this.mappers.delete(id);\n      this.updatedSinceLastExecute = true;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      if (this.updatedSinceLastExecute) {\n        this.updateOrder();\n        this.updatedSinceLastExecute = false;\n      }\n\n      for (var i = 0, len = this.sortedMappers.length; i < len; ++i) {\n        var mapper = this.sortedMappers[i];\n\n        if (mapper.dirty) {\n          mapper.execute();\n        }\n      }\n    }\n  }, {\n    key: \"updateOrder\",\n    value: function updateOrder() {\n      var nodes = (0, _toConsumableArray2.default)(this.mappers.values()).map(function (mapper) {\n        return new Node(mapper);\n      });\n      var mappersById = {};\n      this.mappers.forEach(function (mapper) {\n        mappersById[mapper.id] = mapper;\n      });\n\n      for (var i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n        var node = nodes[i];\n\n        if (node.mapper.outputs.length === 0) {\n          continue;\n        }\n\n        for (var j = 0; j < nodesLen; ++j) {\n          var restNode = nodes[j];\n\n          if (i === j || restNode.mapper.inputs.length === 0) {\n            continue;\n          }\n\n          for (var outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n            for (var resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n              if (node.mapper.outputs[outi]._id === restNode.mapper.inputs[resti]._id) {\n                node.children.push(restNode);\n              }\n            }\n          }\n        }\n      }\n\n      var post = {};\n      var postCounter = 1;\n\n      var dfs = function dfs(node) {\n        var index = nodes.indexOf(node);\n\n        if (index === -1) {\n          return;\n        }\n\n        ++postCounter;\n        nodes.splice(index, 1);\n\n        if (node.children.length === 0 && nodes.length > 0) {\n          post[node.mapper.id] = postCounter++;\n          dfs(nodes[0]);\n          return;\n        }\n\n        for (var _i = 0, len = node.children.length; _i < len; ++_i) {\n          dfs(node.children[_i]);\n        }\n\n        post[node.mapper.id] = postCounter++;\n      };\n\n      while (nodes.length) {\n        dfs(nodes[0]);\n      }\n\n      var postArray = Object.keys(post).map(function (key) {\n        return [key, post[key]];\n      });\n      postArray.sort(function (a, b) {\n        return b[1] - a[1];\n      });\n      this.sortedMappers = [];\n\n      for (var _i2 = 0, len = postArray.length; _i2 < len; ++_i2) {\n        var _postArray$_i = (0, _slicedToArray2.default)(postArray[_i2], 1),\n            id = _postArray$_i[0];\n\n        this.sortedMappers.push(mappersById[id]);\n      }\n    }\n  }, {\n    key: \"needRunOnRender\",\n    get: function get() {\n      return this.updatedSinceLastExecute;\n    }\n  }]);\n  return MapperRegistry;\n}();\n\nexports.default = MapperRegistry;\n\nvar Node = function Node(mapper) {\n  var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  (0, _classCallCheck2.default)(this, Node);\n  this.mapper = null;\n  this.children = [];\n  this.mapper = mapper;\n  this.children = children;\n};","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-reanimated/src/reanimated2/js-reanimated/MapperRegistry.js"],"names":["MapperRegistry","module","sortedMappers","mappers","Map","updatedSinceLastExecute","_module","mapper","set","id","delete","updateOrder","i","len","length","dirty","execute","nodes","values","map","Node","mappersById","forEach","nodesLen","node","outputs","j","restNode","inputs","outi","outputsLen","resti","restLen","_id","children","push","post","postCounter","dfs","index","indexOf","splice","postArray","Object","keys","key","sort","a","b","parents"],"mappings":"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","sourcesContent":["export default class MapperRegistry {\n  sortedMappers = [];\n  mappers = new Map();\n\n  updatedSinceLastExecute = false;\n\n  constructor(module) {\n    this._module = module;\n  }\n\n  startMapper(mapper) {\n    this.mappers.set(mapper.id, mapper);\n    this.updatedSinceLastExecute = true;\n    return mapper.id;\n  }\n\n  stopMapper(id) {\n    this.mappers.delete(id);\n    this.updatedSinceLastExecute = true;\n  }\n\n  execute() {\n    if (this.updatedSinceLastExecute) {\n      this.updateOrder();\n      this.updatedSinceLastExecute = false;\n    }\n\n    for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {\n      const mapper = this.sortedMappers[i];\n      if (mapper.dirty) {\n        mapper.execute();\n      }\n    }\n  }\n\n  updateOrder() {\n    const nodes = [...this.mappers.values()].map((mapper) => new Node(mapper));\n\n    const mappersById = {};\n    this.mappers.forEach((mapper) => {\n      mappersById[mapper.id] = mapper;\n    });\n\n    // create a graph from array of nodes\n    for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n      const node = nodes[i];\n      if (node.mapper.outputs.length === 0) {\n        continue;\n      }\n      for (let j = 0; j < nodesLen; ++j) {\n        const restNode = nodes[j];\n        if (i === j || restNode.mapper.inputs.length === 0) {\n          continue;\n        }\n        for (\n          let outi = 0, outputsLen = node.mapper.outputs.length;\n          outi < outputsLen;\n          ++outi\n        ) {\n          for (\n            let resti = 0, restLen = restNode.mapper.inputs.length;\n            resti < restLen;\n            ++resti\n          ) {\n            if (\n              node.mapper.outputs[outi]._id ===\n              restNode.mapper.inputs[resti]._id\n            ) {\n              node.children.push(restNode);\n            }\n          }\n        }\n      }\n    }\n\n    const post = {};\n    let postCounter = 1;\n    const dfs = (node) => {\n      const index = nodes.indexOf(node);\n      if (index === -1) {\n        // this node has already been handled\n        return;\n      }\n      ++postCounter;\n      nodes.splice(index, 1);\n      if (node.children.length === 0 && nodes.length > 0) {\n        post[node.mapper.id] = postCounter++;\n        dfs(nodes[0]);\n        return;\n      }\n      for (let i = 0, len = node.children.length; i < len; ++i) {\n        dfs(node.children[i]);\n      }\n      post[node.mapper.id] = postCounter++;\n    };\n\n    while (nodes.length) dfs(nodes[0]);\n\n    const postArray = Object.keys(post).map((key) => {\n      return [key, post[key]];\n    });\n    postArray.sort((a, b) => {\n      return b[1] - a[1];\n    });\n\n    // clear sorted mappers\n    this.sortedMappers = [];\n\n    for (let i = 0, len = postArray.length; i < len; ++i) {\n      const [id] = postArray[i];\n      this.sortedMappers.push(mappersById[id]);\n    }\n  }\n\n  get needRunOnRender() {\n    return this.updatedSinceLastExecute;\n  }\n}\n\nclass Node {\n  mapper = null;\n  children = [];\n\n  constructor(mapper, parents = [], children = []) {\n    this.mapper = mapper;\n    this.children = children;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}