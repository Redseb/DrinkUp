{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedOperator = createAnimatedOperator;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _val = require(\"../val\");\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _AnimatedBlock = require(\"../core/AnimatedBlock\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction reduce(fn) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn((0, _val.val)(a), (0, _val.val)(b));\n    });\n  };\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn((0, _val.val)(a), (0, _val.val)(b));\n    }, initialValue);\n  };\n}\n\nfunction infix(fn) {\n  return function (input) {\n    return fn((0, _val.val)(input[0]), (0, _val.val)(input[1]));\n  };\n}\n\nfunction single(fn) {\n  return function (input) {\n    return fn((0, _val.val)(input[0]));\n  };\n}\n\nvar OPERATIONS = {\n  add: reduce(function (a, b) {\n    return a + b;\n  }),\n  sub: reduce(function (a, b) {\n    return a - b;\n  }),\n  multiply: reduce(function (a, b) {\n    return a * b;\n  }),\n  divide: reduce(function (a, b) {\n    return a / b;\n  }),\n  pow: reduce(function (a, b) {\n    return Math.pow(a, b);\n  }),\n  modulo: reduce(function (a, b) {\n    return (a % b + b) % b;\n  }),\n  sqrt: single(function (a) {\n    return Math.sqrt(a);\n  }),\n  log: single(function (a) {\n    return Math.log(a);\n  }),\n  sin: single(function (a) {\n    return Math.sin(a);\n  }),\n  cos: single(function (a) {\n    return Math.cos(a);\n  }),\n  tan: single(function (a) {\n    return Math.tan(a);\n  }),\n  acos: single(function (a) {\n    return Math.acos(a);\n  }),\n  asin: single(function (a) {\n    return Math.asin(a);\n  }),\n  atan: single(function (a) {\n    return Math.atan(a);\n  }),\n  exp: single(function (a) {\n    return Math.exp(a);\n  }),\n  round: single(function (a) {\n    return Math.round(a);\n  }),\n  abs: single(function (a) {\n    return Math.abs(a);\n  }),\n  ceil: single(function (a) {\n    return Math.ceil(a);\n  }),\n  floor: single(function (a) {\n    return Math.floor(a);\n  }),\n  max: reduce(function (a, b) {\n    return Math.max(a, b);\n  }),\n  min: reduce(function (a, b) {\n    return Math.min(a, b);\n  }),\n  and: reduceFrom(function (a, b) {\n    return a && b;\n  }, true),\n  or: reduceFrom(function (a, b) {\n    return a || b;\n  }, false),\n  not: single(function (a) {\n    return !a;\n  }),\n  defined: single(function (a) {\n    return a !== null && a !== undefined && !isNaN(a);\n  }),\n  lessThan: infix(function (a, b) {\n    return a < b;\n  }),\n  eq: infix(function (a, b) {\n    return a == b;\n  }),\n  greaterThan: infix(function (a, b) {\n    return a > b;\n  }),\n  lessOrEq: infix(function (a, b) {\n    return a <= b;\n  }),\n  greaterOrEq: infix(function (a, b) {\n    return a >= b;\n  }),\n  neq: infix(function (a, b) {\n    return a != b;\n  })\n};\n\nvar AnimatedOperator = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedOperator, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedOperator);\n\n  function AnimatedOperator(operator, input) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedOperator);\n    (0, _invariant.default)(typeof operator === 'string', \"Reanimated: Animated.operator node first argument should be of type String, but got: \" + operator);\n    (0, _invariant.default)(input.every(function (el) {\n      return el instanceof _AnimatedNode2.default || typeof el === 'string' || typeof el === 'number';\n    }), \"Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got \" + input);\n    _this = _super.call(this, {\n      type: 'op',\n      op: operator,\n      input: input\n    }, input);\n    _this._op = operator;\n    _this._input = input;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedOperator, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedOperator, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (!this._operation) {\n        this._operation = OPERATIONS[this._op];\n        (0, _invariant.default)(this._operation, \"Illegal operator '%s'\", this._op);\n      }\n\n      return this._operation(this._input);\n    }\n  }]);\n  return AnimatedOperator;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedOperator(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new AnimatedOperator(name, args.map(_AnimatedBlock.adapt));\n  };\n}","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-reanimated/src/core/AnimatedOperator.js"],"names":["reduce","fn","input","a","b","reduceFrom","initialValue","infix","single","OPERATIONS","add","sub","multiply","divide","pow","Math","modulo","sqrt","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","or","not","defined","undefined","isNaN","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","operator","every","el","AnimatedNode","type","op","_op","_input","__nodeID","_operation","createAnimatedOperator","name","args","map","adapt"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n  abs: single(a => Math.abs(a)),\n  ceil: single(a => Math.ceil(a)),\n  floor: single(a => Math.floor(a)),\n  max: reduce((a,b) => Math.max(a, b)),\n  min: reduce((a,b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super(\n      { type: 'op', op: operator, input },\n      input\n    );\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"script"}