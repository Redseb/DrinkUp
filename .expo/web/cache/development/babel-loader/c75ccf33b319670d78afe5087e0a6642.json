{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _base = require(\"./base\");\n\nvar _AnimatedBezier = _interopRequireDefault(require(\"./core/AnimatedBezier\"));\n\nvar Easing = function () {\n  function Easing() {\n    (0, _classCallCheck2.default)(this, Easing);\n  }\n\n  (0, _createClass2.default)(Easing, null, [{\n    key: \"linear\",\n    value: function linear(t) {\n      return t;\n    }\n  }, {\n    key: \"ease\",\n    value: function ease(t) {\n      return new _AnimatedBezier.default(t, 0.42, 0, 1, 1);\n    }\n  }, {\n    key: \"quad\",\n    value: function quad(t) {\n      return (0, _base.multiply)(t, t);\n    }\n  }, {\n    key: \"cubic\",\n    value: function cubic(t) {\n      return (0, _base.multiply)(t, t, t);\n    }\n  }, {\n    key: \"poly\",\n    value: function poly(n) {\n      return function (t) {\n        return (0, _base.pow)(t, n);\n      };\n    }\n  }, {\n    key: \"sin\",\n    value: function sin(t) {\n      return (0, _base.sub)(1, (0, _base.cos)((0, _base.multiply)(t, Math.PI, 0.5)));\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(t) {\n      return (0, _base.sub)(1, (0, _base.sqrt)((0, _base.sub)(1, (0, _base.multiply)(t, t))));\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(t) {\n      return (0, _base.pow)(2, (0, _base.multiply)(10, (0, _base.sub)(t, 1)));\n    }\n  }, {\n    key: \"elastic\",\n    value: function elastic() {\n      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var p = bounciness * Math.PI;\n      return function (t) {\n        return (0, _base.sub)(1, (0, _base.multiply)((0, _base.pow)((0, _base.cos)((0, _base.multiply)(t, Math.PI, 0.5)), 3), (0, _base.cos)((0, _base.multiply)(t, p))));\n      };\n    }\n  }, {\n    key: \"back\",\n    value: function back(s) {\n      if (s === undefined) {\n        s = 1.70158;\n      }\n\n      return function (t) {\n        return (0, _base.multiply)(t, t, (0, _base.sub)((0, _base.multiply)((0, _base.add)(s, 1), t), s));\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce(t) {\n      var sq = function sq(v) {\n        return (0, _base.multiply)(7.5625, v, v);\n      };\n\n      return (0, _base.cond)((0, _base.lessThan)(t, 1 / 2.75), sq(t), (0, _base.cond)((0, _base.lessThan)(t, 2 / 2.75), (0, _base.add)(0.75, sq((0, _base.sub)(t, 1.5 / 2.75))), (0, _base.cond)((0, _base.lessThan)(t, 2.5 / 2.76), (0, _base.add)(0.9375, sq((0, _base.sub)(t, 2.25 / 2.75))), (0, _base.add)(0.984375, sq((0, _base.sub)(t, 2.625 / 2.75))))));\n    }\n  }, {\n    key: \"bezier\",\n    value: function bezier(x1, y1, x2, y2) {\n      return function (t) {\n        return new _AnimatedBezier.default(t, x1, y1, x2, y2);\n      };\n    }\n  }, {\n    key: \"in\",\n    value: function _in(easing) {\n      return easing;\n    }\n  }, {\n    key: \"out\",\n    value: function out(easing) {\n      return function (t) {\n        return (0, _base.sub)(1, easing((0, _base.sub)(1, t)));\n      };\n    }\n  }, {\n    key: \"inOut\",\n    value: function inOut(easing) {\n      return function (t) {\n        return (0, _base.cond)((0, _base.lessThan)(t, 0.5), (0, _base.divide)(easing((0, _base.multiply)(t, 2)), 2), (0, _base.sub)(1, (0, _base.divide)(easing((0, _base.multiply)((0, _base.sub)(1, t), 2)), 2)));\n      };\n    }\n  }]);\n  return Easing;\n}();\n\nexports.default = Easing;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-reanimated/src/Easing.js"],"names":["Easing","t","AnimatedBezier","n","Math","PI","bounciness","p","s","undefined","sq","v","x1","y1","x2","y2","easing"],"mappings":"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","sourcesContent":["import {\n  cond,\n  lessThan,\n  multiply,\n  pow,\n  cos,\n  sqrt,\n  sub,\n  add,\n  divide,\n} from './base';\nimport AnimatedBezier from './core/AnimatedBezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nexport default class Easing {\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t) {\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return multiply(t, t);\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return multiply(t, t, t);\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return t => pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return sub(1, sqrt(sub(1, multiply(t, t))));\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return pow(2, multiply(10, sub(t, 1)));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic(bounciness = 1) {\n    const p = bounciness * Math.PI;\n    return t =>\n      sub(\n        1,\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\n      );\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return t => multiply(t, t, sub(multiply(add(s, 1), t), s));\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t) {\n    const sq = v => multiply(7.5625, v, v);\n    return cond(\n      lessThan(t, 1 / 2.75),\n      sq(t),\n      cond(\n        lessThan(t, 2 / 2.75),\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\n        cond(\n          lessThan(t, 2.5 / 2.76),\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\n        )\n      )\n    );\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(x1, y1, x2, y2) {\n    return t => new AnimatedBezier(t, x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(easing) {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(easing) {\n    return t => sub(1, easing(sub(1, t)));\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(easing) {\n    return t =>\n      cond(\n        lessThan(t, 0.5),\n        divide(easing(multiply(t, 2)), 2),\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}