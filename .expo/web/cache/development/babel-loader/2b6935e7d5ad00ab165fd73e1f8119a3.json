{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = usePressEvents;\n\nvar _PressResponder = _interopRequireDefault(require(\"./PressResponder\"));\n\nvar _react = require(\"react\");\n\nfunction usePressEvents(hostRef, config) {\n  var pressResponderRef = (0, _react.useRef)(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new _PressResponder.default(config);\n  }\n\n  var pressResponder = pressResponderRef.current;\n  (0, _react.useEffect)(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  (0, _react.useEffect)(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  (0, _react.useDebugValue)(config);\n  return pressResponder.getEventHandlers();\n}","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-web/dist/hooks/usePressEvents/index.js"],"names":["usePressEvents","hostRef","config","pressResponderRef","current","PressResponder","pressResponder","configure","reset","getEventHandlers"],"mappings":"AASA;;;;;;;;;AAEA;;AACA;;AACe,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;AACtD,MAAIC,iBAAiB,GAAG,mBAAO,IAAP,CAAxB;;AAEA,MAAIA,iBAAiB,CAACC,OAAlB,IAA6B,IAAjC,EAAuC;AACrCD,IAAAA,iBAAiB,CAACC,OAAlB,GAA4B,IAAIC,uBAAJ,CAAmBH,MAAnB,CAA5B;AACD;;AAED,MAAII,cAAc,GAAGH,iBAAiB,CAACC,OAAvC;AAEA,wBAAU,YAAY;AACpBE,IAAAA,cAAc,CAACC,SAAf,CAAyBL,MAAzB;AACD,GAFD,EAEG,CAACA,MAAD,EAASI,cAAT,CAFH;AAKA,wBAAU,YAAY;AACpB,WAAO,YAAY;AACjBA,MAAAA,cAAc,CAACE,KAAf;AACD,KAFD;AAGD,GAJD,EAIG,CAACF,cAAD,CAJH;AAKA,4BAAcJ,MAAd;AACA,SAAOI,cAAc,CAACG,gBAAf,EAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"]},"metadata":{},"sourceType":"script"}