{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedBlock = createAnimatedBlock;\nexports.adapt = adapt;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _val = require(\"../val\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"./InternalAnimatedValue\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedBlock = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedBlock, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedBlock);\n\n  function AnimatedBlock(array) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedBlock);\n    (0, _invariant.default)(array.every(function (el) {\n      return el instanceof _AnimatedNode2.default;\n    }), \"Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    _this = _super.call(this, {\n      type: 'block',\n      block: array\n    }, array);\n    _this._array = array;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedBlock, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBlock, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var result;\n\n      this._array.forEach(function (node) {\n        result = (0, _val.val)(node);\n      });\n\n      return result;\n    }\n  }]);\n  return AnimatedBlock;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && (v == null ? void 0 : v.__isProxy)) {\n    if (!v.__val) {\n      v.__val = new _InternalAnimatedValue.default(0);\n    }\n\n    return v.__val;\n  }\n\n  return v instanceof _AnimatedNode2.default ? v : _InternalAnimatedValue.default.valueForConstant(v);\n}\n\nfunction adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(function (node) {\n    return adapt(node);\n  })) : nodify(v);\n}","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-reanimated/src/core/AnimatedBlock.js"],"names":["AnimatedBlock","array","every","el","AnimatedNode","type","block","_array","__nodeID","result","forEach","node","createAnimatedBlock","items","adapt","nodify","v","__isProxy","__val","InternalAnimatedValue","valueForConstant","Array","isArray","map"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;IAEMA,a;;;;;AAGJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,4BACEA,KAAK,CAACC,KAAN,CAAY,UAAAC,EAAE;AAAA,aAAIA,EAAE,YAAYC,sBAAlB;AAAA,KAAd,CADF;AAIA,8BAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAEL;AAAxB,KAAN,EAAuCA,KAAvC;AACA,UAAKM,MAAL,GAAcN,KAAd;AANiB;AAOlB;;;;+BAEU;AACT,qCAA6B,KAAKO,QAAlC;AACD;;;mCAEc;AACb,UAAIC,MAAJ;;AACA,WAAKF,MAAL,CAAYG,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1BF,QAAAA,MAAM,GAAG,cAAIE,IAAJ,CAAT;AACD,OAFD;;AAGA,aAAOF,MAAP;AACD;;;EAtByBL,sB;;AAyBrB,SAASQ,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,SAAOC,KAAK,CAACD,KAAD,CAAZ;AACD;;AAED,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,MAAI,OAAOA,CAAP,KAAa,QAAb,KAAyBA,CAAzB,oBAAyBA,CAAC,CAAEC,SAA5B,CAAJ,EAA2C;AACzC,QAAI,CAACD,CAAC,CAACE,KAAP,EAAc;AACZF,MAAAA,CAAC,CAACE,KAAF,GAAU,IAAIC,8BAAJ,CAA0B,CAA1B,CAAV;AACD;;AACD,WAAOH,CAAC,CAACE,KAAT;AACD;;AAED,SAAOF,CAAC,YAAYZ,sBAAb,GACHY,CADG,GAEHG,+BAAsBC,gBAAtB,CAAuCJ,CAAvC,CAFJ;AAGD;;AAEM,SAASF,KAAT,CAAeE,CAAf,EAAkB;AACvB,SAAOK,KAAK,CAACC,OAAN,CAAcN,CAAd,IACH,IAAIhB,aAAJ,CAAkBgB,CAAC,CAACO,GAAF,CAAM,UAAAZ,IAAI;AAAA,WAAIG,KAAK,CAACH,IAAD,CAAT;AAAA,GAAV,CAAlB,CADG,GAEHI,MAAM,CAACC,CAAD,CAFV;AAGD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]},"metadata":{},"sourceType":"script"}