{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transform2d = exports.decompose2d = exports.processTransform2d = exports.multiply3 = exports.matrixVecMul3 = exports.dot3 = void 0;\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nvar _Math = require(\"./Math\");\n\nvar add = _reactNativeReanimated.default.add,\n    multiply = _reactNativeReanimated.default.multiply,\n    sqrt = _reactNativeReanimated.default.sqrt,\n    cos = _reactNativeReanimated.default.cos,\n    sin = _reactNativeReanimated.default.sin,\n    sub = _reactNativeReanimated.default.sub,\n    divide = _reactNativeReanimated.default.divide,\n    pow = _reactNativeReanimated.default.pow,\n    tan = _reactNativeReanimated.default.tan;\n\nvar exhaustiveCheck = function exhaustiveCheck(a) {\n  throw new Error(\"Unexhaustive handling for \" + a);\n};\n\nvar identityMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n\nvar translateXMatrix = function translateXMatrix(x) {\n  return [[1, 0, x], [0, 1, 0], [0, 0, 1]];\n};\n\nvar translateYMatrix = function translateYMatrix(y) {\n  return [[1, 0, 0], [0, 1, y], [0, 0, 1]];\n};\n\nvar scaleMatrix = function scaleMatrix(s) {\n  return [[s, 0, 0], [0, s, 0], [0, 0, 1]];\n};\n\nvar scaleXMatrix = function scaleXMatrix(s) {\n  return [[s, 0, 0], [0, 1, 0], [0, 0, 1]];\n};\n\nvar scaleYMatrix = function scaleYMatrix(s) {\n  return [[1, 0, 0], [0, s, 0], [0, 0, 1]];\n};\n\nvar skewXMatrix = function skewXMatrix(s) {\n  return [[1, tan(s), 0], [0, 1, 0], [0, 0, 1]];\n};\n\nvar skewYMatrix = function skewYMatrix(s) {\n  return [[1, 0, 0], [tan(s), 1, 0], [0, 0, 1]];\n};\n\nvar rotateZMatrix = function rotateZMatrix(r) {\n  return [[cos(r), multiply(-1, sin(r)), 0], [sin(r), cos(r), 0], [0, 0, 1]];\n};\n\nvar dot3 = function dot3(row, col) {\n  return add(multiply(row[0], col[0]), multiply(row[1], col[1]), multiply(row[2], col[2]));\n};\n\nexports.dot3 = dot3;\n\nvar matrixVecMul3 = function matrixVecMul3(m, v) {\n  return [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)];\n};\n\nexports.matrixVecMul3 = matrixVecMul3;\n\nvar multiply3 = function multiply3(m1, m2) {\n  var col0 = [m2[0][0], m2[1][0], m2[2][0]];\n  var col1 = [m2[0][1], m2[1][1], m2[2][1]];\n  var col2 = [m2[0][2], m2[1][2], m2[2][2]];\n  return [[dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)], [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)], [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)]];\n};\n\nexports.multiply3 = multiply3;\n\nvar processTransform2d = function processTransform2d(transforms) {\n  return transforms.reduce(function (acc, transform) {\n    var key = Object.keys(transform)[0];\n    var value = transform[key];\n\n    if (key === \"translateX\") {\n      return multiply3(acc, translateXMatrix(value));\n    }\n\n    if (key === \"translateY\") {\n      return multiply3(acc, translateYMatrix(value));\n    }\n\n    if (key === \"scale\") {\n      return multiply3(acc, scaleMatrix(value));\n    }\n\n    if (key === \"scaleX\") {\n      return multiply3(acc, scaleXMatrix(value));\n    }\n\n    if (key === \"scaleY\") {\n      return multiply3(acc, scaleYMatrix(value));\n    }\n\n    if (key === \"skewX\") {\n      return multiply3(acc, skewXMatrix(value));\n    }\n\n    if (key === \"skewY\") {\n      return multiply3(acc, skewYMatrix(value));\n    }\n\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply3(acc, rotateZMatrix(value));\n    }\n\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n};\n\nexports.processTransform2d = processTransform2d;\n\nvar isMatrix3 = function isMatrix3(arg) {\n  return arg.length === 3 && arg[0] instanceof Array;\n};\n\nvar decompose2d = function decompose2d(arg) {\n  var m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  var a = m[0][0];\n  var b = m[1][0];\n  var c = m[0][1];\n  var d = m[1][1];\n  var translateX = m[0][2];\n  var translateY = m[1][2];\n  var E = divide(add(a, d), 2);\n  var F = divide(sub(a, d), 2);\n  var G = divide(add(c, b), 2);\n  var H = divide(sub(c, b), 2);\n  var Q = sqrt(add(pow(E, 2), pow(H, 2)));\n  var R = sqrt(add(pow(F, 2), pow(G, 2)));\n  var scaleX = add(Q, R);\n  var scaleY = sub(Q, R);\n  var a1 = (0, _Math.atan2)(G, F);\n  var a2 = (0, _Math.atan2)(H, E);\n  var theta = divide(sub(a2, a1), 2);\n  var phi = divide(add(a2, a1), 2);\n  return [{\n    translateX: translateX\n  }, {\n    translateY: translateY\n  }, {\n    rotateZ: multiply(-1, theta)\n  }, {\n    scaleX: scaleX\n  }, {\n    scaleY: scaleY\n  }, {\n    rotateZ: multiply(-1, phi)\n  }];\n};\n\nexports.decompose2d = decompose2d;\n\nvar adjugate = function adjugate(m) {\n  return [[sub(multiply(m[1][1], m[2][2]), multiply(m[1][2], m[2][1])), sub(multiply(m[0][2], m[2][1]), multiply(m[0][1], m[2][2])), sub(multiply(m[0][1], m[1][2]), multiply(m[0][2], m[1][1]))], [sub(multiply(m[1][2], m[2][0]), multiply(m[1][0], m[2][2])), sub(multiply(m[0][0], m[2][2]), multiply(m[0][2], m[2][0])), sub(multiply(m[0][2], m[1][0]), multiply(m[0][0], m[1][2]))], [sub(multiply(m[1][0], m[2][1]), multiply(m[1][1], m[2][0])), sub(multiply(m[0][1], m[2][0]), multiply(m[0][0], m[2][1])), sub(multiply(m[0][0], m[1][1]), multiply(m[0][1], m[1][0]))]];\n};\n\nvar basisToPoints = function basisToPoints(_ref) {\n  var p1 = _ref.p1,\n      p2 = _ref.p2,\n      p3 = _ref.p3,\n      p4 = _ref.p4;\n  var m = [[p1.x, p2.x, p3.x], [p1.y, p2.y, p3.y], [1, 1, 1]];\n  var v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [[v[0], 0, 0], [0, v[1], 0], [0, 0, v[2]]]);\n};\n\nvar transform2d = function transform2d(params) {\n  var s = basisToPoints(params.canvas);\n  var d = basisToPoints(params.projected);\n  var t = multiply3(d, adjugate(s));\n  return [[divide(t[0][0], t[2][2]), divide(t[0][1], t[2][2]), divide(t[0][2], t[2][2])], [divide(t[1][0], t[2][2]), divide(t[1][1], t[2][2]), divide(t[1][2], t[2][2])], [divide(t[2][0], t[2][2]), divide(t[2][1], t[2][2]), 1]];\n};\n\nexports.transform2d = transform2d;","map":{"version":3,"sources":["Matrix3.ts"],"names":["add","multiply","sqrt","cos","sin","sub","divide","pow","tan","Animated","exhaustiveCheck","identityMatrix","translateXMatrix","translateYMatrix","scaleMatrix","scaleXMatrix","scaleYMatrix","skewXMatrix","skewYMatrix","rotateZMatrix","dot3","row","col","matrixVecMul3","m","multiply3","col0","m2","col1","col2","m1","processTransform2d","transforms","key","Object","value","transform","isMatrix3","arg","decompose2d","a","b","c","d","translateX","translateY","E","F","G","H","Q","R","scaleX","scaleY","a1","atan2","a2","theta","phi","rotateZ","adjugate","basisToPoints","p1","p2","p3","p4","v","transform2d","s","params","t"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport Animated from \"react-native-reanimated\";\n\nimport { atan2 } from \"./Math\";\nimport { Vector } from \"./Vectors\";\n\nconst { add, multiply, sqrt, cos, sin, sub, divide, pow, tan } = Animated;\n\nexport type Vec3 = readonly [\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>\n];\n\nexport type Matrix3 = readonly [Vec3, Vec3, Vec3];\n\ntype Transform2dName =\n  | \"translateX\"\n  | \"translateY\"\n  | \"scale\"\n  | \"skewX\"\n  | \"skewY\"\n  | \"scaleX\"\n  | \"scaleY\"\n  | \"rotateZ\"\n  | \"rotate\";\ntype Transformations = {\n  [Name in Transform2dName]: Animated.Adaptable<number>;\n};\nexport type Transforms2d = (\n  | Pick<Transformations, \"translateX\">\n  | Pick<Transformations, \"translateY\">\n  | Pick<Transformations, \"scale\">\n  | Pick<Transformations, \"scaleX\">\n  | Pick<Transformations, \"scaleY\">\n  | Pick<Transformations, \"skewX\">\n  | Pick<Transformations, \"skewY\">\n  | Pick<Transformations, \"rotateZ\">\n  | Pick<Transformations, \"rotate\">\n)[];\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\nconst identityMatrix: Matrix3 = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateXMatrix = (x: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, x],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateYMatrix = (y: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, 1, y],\n  [0, 0, 1],\n];\n\nconst scaleMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\nconst scaleXMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst scaleYMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\nconst skewXMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, tan(s), 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst skewYMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [tan(s), 1, 0],\n  [0, 0, 1],\n];\n\nconst rotateZMatrix = (r: Animated.Adaptable<number>): Matrix3 => [\n  [cos(r), multiply(-1, sin(r)), 0],\n  [sin(r), cos(r), 0],\n  [0, 0, 1],\n];\n\nexport const dot3 = (row: Vec3, col: Vec3) =>\n  add(\n    multiply(row[0], col[0]),\n    multiply(row[1], col[1]),\n    multiply(row[2], col[2])\n  );\n\nexport const matrixVecMul3 = (m: Matrix3, v: Vec3) =>\n  [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)] as const;\n\nexport const multiply3 = (m1: Matrix3, m2: Matrix3) => {\n  const col0 = [m2[0][0], m2[1][0], m2[2][0]] as const;\n  const col1 = [m2[0][1], m2[1][1], m2[2][1]] as const;\n  const col2 = [m2[0][2], m2[1][2], m2[2][2]] as const;\n  return [\n    [dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)],\n    [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)],\n    [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)],\n  ] as const;\n};\n\nexport const processTransform2d = (transforms: Transforms2d) =>\n  transforms.reduce((acc, transform) => {\n    const key = Object.keys(transform)[0] as Transform2dName;\n    const value = (transform as Pick<Transformations, typeof key>)[key];\n    if (key === \"translateX\") {\n      return multiply3(acc, translateXMatrix(value));\n    }\n    if (key === \"translateY\") {\n      return multiply3(acc, translateYMatrix(value));\n    }\n    if (key === \"scale\") {\n      return multiply3(acc, scaleMatrix(value));\n    }\n    if (key === \"scaleX\") {\n      return multiply3(acc, scaleXMatrix(value));\n    }\n    if (key === \"scaleY\") {\n      return multiply3(acc, scaleYMatrix(value));\n    }\n    if (key === \"skewX\") {\n      return multiply3(acc, skewXMatrix(value));\n    }\n    if (key === \"skewY\") {\n      return multiply3(acc, skewYMatrix(value));\n    }\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply3(acc, rotateZMatrix(value));\n    }\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n\nconst isMatrix3 = (arg: Matrix3 | Transforms2d): arg is Matrix3 =>\n  arg.length === 3 && arg[0] instanceof Array;\n\n// https://math.stackexchange.com/questions/13150/extracting-rotation-scale-values-from-2d-transformation-matrix\nexport const decompose2d = (arg: Matrix3 | Transforms2d) => {\n  const m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  const a = m[0][0];\n  const b = m[1][0];\n  const c = m[0][1];\n  const d = m[1][1];\n  const translateX = m[0][2] as Animated.Node<number>;\n  const translateY = m[1][2] as Animated.Node<number>;\n  const E = divide(add(a, d), 2);\n  const F = divide(sub(a, d), 2);\n  const G = divide(add(c, b), 2);\n  const H = divide(sub(c, b), 2);\n  const Q = sqrt(add(pow(E, 2), pow(H, 2)));\n  const R = sqrt(add(pow(F, 2), pow(G, 2)));\n  const scaleX = add(Q, R);\n  const scaleY = sub(Q, R);\n  const a1 = atan2(G, F);\n  const a2 = atan2(H, E);\n  const theta = divide(sub(a2, a1), 2);\n  const phi = divide(add(a2, a1), 2);\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: multiply(-1, theta) },\n    { scaleX },\n    { scaleY },\n    { rotateZ: multiply(-1, phi) },\n  ] as const;\n};\n\nconst adjugate = (m: Matrix3) => {\n  return [\n    [\n      sub(multiply(m[1][1], m[2][2]), multiply(m[1][2], m[2][1])),\n      sub(multiply(m[0][2], m[2][1]), multiply(m[0][1], m[2][2])),\n      sub(multiply(m[0][1], m[1][2]), multiply(m[0][2], m[1][1])),\n    ],\n    [\n      sub(multiply(m[1][2], m[2][0]), multiply(m[1][0], m[2][2])),\n      sub(multiply(m[0][0], m[2][2]), multiply(m[0][2], m[2][0])),\n      sub(multiply(m[0][2], m[1][0]), multiply(m[0][0], m[1][2])),\n    ],\n    [\n      sub(multiply(m[1][0], m[2][1]), multiply(m[1][1], m[2][0])),\n      sub(multiply(m[0][1], m[2][0]), multiply(m[0][0], m[2][1])),\n      sub(multiply(m[0][0], m[1][1]), multiply(m[0][1], m[1][0])),\n    ],\n  ] as const;\n};\n\ninterface Quadrilateral {\n  p1: Vector;\n  p2: Vector;\n  p3: Vector;\n  p4: Vector;\n}\n\ninterface Parameters {\n  canvas: Quadrilateral;\n  projected: Quadrilateral;\n}\n\nconst basisToPoints = ({ p1, p2, p3, p4 }: Quadrilateral) => {\n  const m = [\n    [p1.x, p2.x, p3.x],\n    [p1.y, p2.y, p3.y],\n    [1, 1, 1],\n  ] as const;\n  const v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [\n    [v[0], 0, 0],\n    [0, v[1], 0],\n    [0, 0, v[2]],\n  ]);\n};\n\n// https://math.stackexchange.com/questions/296794/finding-the-transform-matrix-from-4-projected-points-with-javascript\n// https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\n// http://jsfiddle.net/dFrHS/1/\nexport const transform2d = (params: Parameters) => {\n  const s = basisToPoints(params.canvas);\n  const d = basisToPoints(params.projected);\n  const t = multiply3(d, adjugate(s));\n  return [\n    [\n      divide(t[0][0], t[2][2]),\n      divide(t[0][1], t[2][2]),\n      divide(t[0][2], t[2][2]),\n    ],\n    [\n      divide(t[1][0], t[2][2]),\n      divide(t[1][1], t[2][2]),\n      divide(t[1][2], t[2][2]),\n    ],\n    [divide(t[2][0], t[2][2]), divide(t[2][1], t[2][2]), 1],\n  ] as const;\n};\n"]},"metadata":{},"sourceType":"script"}