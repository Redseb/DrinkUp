{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar _createElement = _interopRequireDefault(require(\"../createElement\"));\n\nvar _css = _interopRequireDefault(require(\"../StyleSheet/css\"));\n\nvar _pick = _interopRequireDefault(require(\"../../modules/pick\"));\n\nvar _useElementLayout = _interopRequireDefault(require(\"../../hooks/useElementLayout\"));\n\nvar _useLayoutEffect = _interopRequireDefault(require(\"../../hooks/useLayoutEffect\"));\n\nvar _useMergeRefs = _interopRequireDefault(require(\"../../modules/useMergeRefs\"));\n\nvar _usePlatformMethods = _interopRequireDefault(require(\"../../hooks/usePlatformMethods\"));\n\nvar _useResponderEvents = _interopRequireDefault(require(\"../../hooks/useResponderEvents\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../StyleSheet\"));\n\nvar _TextInputState = _interopRequireDefault(require(\"../../modules/TextInputState\"));\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = {\n  accessibilityLabel: true,\n  accessibilityLiveRegion: true,\n  accessibilityRole: true,\n  accessibilityState: true,\n  accessibilityValue: true,\n  accessible: true,\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  children: true,\n  classList: true,\n  defaultValue: true,\n  dir: true,\n  disabled: true,\n  importantForAccessibility: true,\n  maxLength: true,\n  nativeID: true,\n  onBlur: true,\n  onChange: true,\n  onClick: true,\n  onClickCapture: true,\n  onContextMenu: true,\n  onFocus: true,\n  onScroll: true,\n  onTouchCancel: true,\n  onTouchCancelCapture: true,\n  onTouchEnd: true,\n  onTouchEndCapture: true,\n  onTouchMove: true,\n  onTouchMoveCapture: true,\n  onTouchStart: true,\n  onTouchStartCapture: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  ref: true,\n  rows: true,\n  spellCheck: true,\n  style: true,\n  value: true,\n  testID: true,\n  type: true,\n  dataSet: true,\n  onMouseDown: true,\n  onMouseEnter: true,\n  onMouseLeave: true,\n  onMouseMove: true,\n  onMouseOver: true,\n  onMouseOut: true,\n  onMouseUp: true\n};\n\nvar pickProps = function pickProps(props) {\n  return (0, _pick.default)(props, forwardPropsList);\n};\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar TextInput = (0, _react.forwardRef)(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = (0, _react.useRef)({\n    height: null,\n    width: null\n  });\n  var hostRef = (0, _react.useRef)(null);\n  var handleContentSizeChange = (0, _react.useCallback)(function () {\n    var node = hostRef.current;\n\n    if (multiline && onContentSizeChange && node != null) {\n      var newHeight = node.scrollHeight;\n      var newWidth = node.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [hostRef, multiline, onContentSizeChange]);\n  var imperativeRef = (0, _react.useMemo)(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && _TextInputState.default.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange();\n      }\n    };\n  }, [handleContentSizeChange]);\n  var setRef = (0, _useMergeRefs.default)(forwardedRef, hostRef, imperativeRef);\n\n  function handleBlur(e) {\n    _TextInputState.default._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var text = e.target.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange();\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var node = hostRef.current;\n\n    if (node != null) {\n      _TextInputState.default._currentlyFocusedNode = node;\n\n      if (onFocus) {\n        e.nativeEvent.text = e.target.value;\n        onFocus(e);\n      }\n\n      if (clearTextOnFocus) {\n        node.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        node.select();\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostRef.current != null) {\n        hostRef.current.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  (0, _useLayoutEffect.default)(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      _TextInputState.default._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  var classList = [classes.textinput];\n\n  var style = _StyleSheet.default.compose(props.style, placeholderTextColor && {\n    placeholderTextColor: placeholderTextColor\n  });\n\n  (0, _useElementLayout.default)(hostRef, onLayout);\n  (0, _useResponderEvents.default)(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList;\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterkeyhint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.ref = setRef;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n  (0, _usePlatformMethods.default)(hostRef, supportedProps);\n  return (0, _createElement.default)(component, supportedProps);\n});\nTextInput.displayName = 'TextInput';\nTextInput.State = _TextInputState.default;\n\nvar classes = _css.default.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\n\nvar _default = TextInput;\nexports.default = _default;","map":{"version":3,"sources":["D:/Programming/React Native/drinkUp/node_modules/react-native-web/dist/exports/TextInput/index.js"],"names":["isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setSelectionRange","e","forwardPropsList","accessibilityLabel","accessibilityLiveRegion","accessibilityRole","accessibilityState","accessibilityValue","accessible","autoCapitalize","autoComplete","autoCorrect","autoFocus","children","classList","defaultValue","dir","disabled","importantForAccessibility","maxLength","nativeID","onBlur","onChange","onClick","onClickCapture","onContextMenu","onFocus","onScroll","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","placeholder","pointerEvents","readOnly","ref","rows","spellCheck","style","value","testID","type","dataSet","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","pickProps","props","isEventComposing","nativeEvent","isComposing","keyCode","TextInput","forwardedRef","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onChangeText","onContentSizeChange","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","inputMode","dimensions","height","width","hostRef","handleContentSizeChange","current","newHeight","scrollHeight","newWidth","scrollWidth","contentSize","imperativeRef","hostNode","clear","isFocused","TextInputState","currentlyFocusedField","setRef","handleBlur","_currentlyFocusedNode","text","target","handleChange","handleFocus","select","handleKeyDown","stopPropagation","blurOnSubmitDefault","shouldBlurOnSubmit","key","shiftKey","isDefaultPrevented","preventDefault","blur","handleSelectionChange","document","activeElement","component","classes","textinput","StyleSheet","compose","supportedProps","undefined","enterkeyhint","onKeyDown","onSelect","displayName","State","css","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { forwardRef, useCallback, useMemo, useRef } from 'react';\nimport createElement from '../createElement';\nimport css from '../StyleSheet/css';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../hooks/useElementLayout';\nimport useLayoutEffect from '../../hooks/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../hooks/usePlatformMethods';\nimport useResponderEvents from '../../hooks/useResponderEvents';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = {\n  accessibilityLabel: true,\n  accessibilityLiveRegion: true,\n  accessibilityRole: true,\n  accessibilityState: true,\n  accessibilityValue: true,\n  accessible: true,\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  children: true,\n  classList: true,\n  defaultValue: true,\n  dir: true,\n  disabled: true,\n  importantForAccessibility: true,\n  maxLength: true,\n  nativeID: true,\n  onBlur: true,\n  onChange: true,\n  onClick: true,\n  onClickCapture: true,\n  onContextMenu: true,\n  onFocus: true,\n  onScroll: true,\n  onTouchCancel: true,\n  onTouchCancelCapture: true,\n  onTouchEnd: true,\n  onTouchEndCapture: true,\n  onTouchMove: true,\n  onTouchMoveCapture: true,\n  onTouchStart: true,\n  onTouchStartCapture: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  ref: true,\n  rows: true,\n  spellCheck: true,\n  style: true,\n  value: true,\n  testID: true,\n  type: true,\n  // unstable\n  dataSet: true,\n  onMouseDown: true,\n  onMouseEnter: true,\n  onMouseLeave: true,\n  onMouseMove: true,\n  onMouseOver: true,\n  onMouseOut: true,\n  onMouseUp: true\n};\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n}; // If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar TextInput = forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = useRef(null);\n  var handleContentSizeChange = useCallback(function () {\n    var node = hostRef.current;\n\n    if (multiline && onContentSizeChange && node != null) {\n      var newHeight = node.scrollHeight;\n      var newWidth = node.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [hostRef, multiline, onContentSizeChange]);\n  var imperativeRef = useMemo(function () {\n    return function (hostNode) {\n      // TextInput needs to add more methods to the hostNode in addition to those\n      // added by `usePlatformMethods`. This is temporarily until an API like\n      // `TextInput.clear(hostRef)` is added to React Native.\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange();\n      }\n    };\n  }, [handleContentSizeChange]);\n  var setRef = useMergeRefs(forwardedRef, hostRef, imperativeRef);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var text = e.target.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange();\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var node = hostRef.current;\n\n    if (node != null) {\n      TextInputState._currentlyFocusedNode = node;\n\n      if (onFocus) {\n        e.nativeEvent.text = e.target.value;\n        onFocus(e);\n      }\n\n      if (clearTextOnFocus) {\n        node.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        node.select();\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    // Prevent key events bubbling (see #612)\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostRef.current != null) {\n        hostRef.current.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  var classList = [classes.textinput];\n  var style = StyleSheet.compose(props.style, placeholderTextColor && {\n    placeholderTextColor: placeholderTextColor\n  });\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList; // 'auto' by default allows browsers to infer writing direction\n\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterkeyhint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.ref = setRef;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n  usePlatformMethods(hostRef, supportedProps);\n  return createElement(component, supportedProps);\n});\nTextInput.displayName = 'TextInput'; // $FlowFixMe\n\nTextInput.State = TextInputState;\nvar classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\nexport default TextInput;"]},"metadata":{},"sourceType":"script"}