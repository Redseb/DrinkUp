{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.vec = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nvar _Math = require(\"./Math\");\n\nvar Value = _reactNativeReanimated.default.Value,\n    block = _reactNativeReanimated.default.block;\n\nvar create = function create(x, y) {\n  var _ref;\n\n  return {\n    x: x != null ? x : 0,\n    y: (_ref = y != null ? y : x) != null ? _ref : 0\n  };\n};\n\nvar createValue = function createValue() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 ? arguments[1] : undefined;\n  return create(new Value(x), new Value(y != null ? y : x));\n};\n\nvar isAdaptable = function isAdaptable(value) {\n  return typeof value === \"number\" || value instanceof _reactNativeReanimated.default.Node || value instanceof _reactNativeReanimated.default.Value;\n};\n\nvar get = function get(vectors, dimension) {\n  return vectors.map(function (vector) {\n    return isAdaptable(vector) ? vector : vector[dimension];\n  });\n};\n\nvar apply = function apply(fn) {\n  for (var _len = arguments.length, vectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    vectors[_key - 1] = arguments[_key];\n  }\n\n  return {\n    x: fn.apply(void 0, (0, _toConsumableArray2.default)(get(vectors, \"x\"))),\n    y: fn.apply(void 0, (0, _toConsumableArray2.default)(get(vectors, \"y\")))\n  };\n};\n\nvar add = function add() {\n  for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    vectors[_key2] = arguments[_key2];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.add].concat(vectors));\n};\n\nvar sub = function sub() {\n  for (var _len3 = arguments.length, vectors = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    vectors[_key3] = arguments[_key3];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.sub].concat(vectors));\n};\n\nvar div = function div() {\n  for (var _len4 = arguments.length, vectors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    vectors[_key4] = arguments[_key4];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.divide].concat(vectors));\n};\n\nvar mul = function mul() {\n  for (var _len5 = arguments.length, vectors = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    vectors[_key5] = arguments[_key5];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.multiply].concat(vectors));\n};\n\nvar pow = function pow() {\n  for (var _len6 = arguments.length, vectors = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    vectors[_key6] = arguments[_key6];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.pow].concat(vectors));\n};\n\nvar sqrt = function sqrt() {\n  for (var _len7 = arguments.length, vectors = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    vectors[_key7] = arguments[_key7];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.sqrt].concat(vectors));\n};\n\nvar cos = function cos() {\n  for (var _len8 = arguments.length, vectors = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    vectors[_key8] = arguments[_key8];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.cos].concat(vectors));\n};\n\nvar sin = function sin() {\n  for (var _len9 = arguments.length, vectors = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    vectors[_key9] = arguments[_key9];\n  }\n\n  return apply.apply(void 0, [_reactNativeReanimated.default.sin].concat(vectors));\n};\n\nvar min = function min(vector, value) {\n  return apply(_reactNativeReanimated.default.min, vector, value);\n};\n\nvar max = function max(vector, value) {\n  return apply(_reactNativeReanimated.default.max, vector, value);\n};\n\nvar clamp = function clamp(value, minVec, maxVec) {\n  return apply(_Math.clamp, value, minVec, maxVec);\n};\n\nvar minus = function minus(a) {\n  return mul(-1, a);\n};\n\nvar set = function set(a, b) {\n  return block([_reactNativeReanimated.default.set(a.x, isAdaptable(b) ? b : b.x), _reactNativeReanimated.default.set(a.y, isAdaptable(b) ? b : b.y)]);\n};\n\nvar length = function length(v) {\n  return _reactNativeReanimated.default.sqrt(_reactNativeReanimated.default.add(_reactNativeReanimated.default.pow(v.x, 2), _reactNativeReanimated.default.pow(v.y, 2)));\n};\n\nvar normalize = function normalize(v) {\n  return div(v, length(v));\n};\n\nvar dot = function dot(v1, v2) {\n  return add(_reactNativeReanimated.default.multiply(v1.x, v2.x), _reactNativeReanimated.default.multiply(v1.y, v2.y));\n};\n\nvar cross = function cross(v1, v2) {\n  return sub(_reactNativeReanimated.default.multiply(v1.x, v2.y), _reactNativeReanimated.default.multiply(v1.y, v2.x));\n};\n\nvar vec = {\n  create: create,\n  createValue: createValue,\n  minus: minus,\n  add: add,\n  sub: sub,\n  dot: dot,\n  div: div,\n  mul: mul,\n  multiply: mul,\n  divide: div,\n  pow: pow,\n  sqrt: sqrt,\n  set: set,\n  clamp: clamp,\n  apply: apply,\n  min: min,\n  max: max,\n  cos: cos,\n  sin: sin,\n  length: length,\n  normalize: normalize,\n  cross: cross\n};\nexports.vec = vec;","map":{"version":3,"sources":["Vectors.ts"],"names":["Value","block","Animated","create","x","y","createValue","isAdaptable","value","get","vectors","vector","apply","fn","add","sub","div","mul","pow","sqrt","cos","sin","min","max","clamp","minus","set","a","b","length","v","normalize","dot","v1","v2","cross","vec","multiply","divide"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { clamp as clamp1 } from \"./Math\";\n\nconst { Value, block } = Animated;\ntype Dimension = \"x\" | \"y\";\ntype Fn = (...args: Animated.Adaptable<number>[]) => Animated.Node<number>;\ntype Adaptable = Vector | Animated.Adaptable<number>;\ntype SingleArgOp<T extends Adaptable = Adaptable> = [T];\ntype BinArgOp<T extends Adaptable = Adaptable> = [T, T, ...T[]];\n\nexport interface Vector<\n  T extends Animated.Adaptable<number> = Animated.Adaptable<number>\n> {\n  x: T;\n  y: T;\n}\n\ntype Create = {\n  (): Vector<0>;\n  <T extends Animated.Adaptable<number>>(x: T, y?: T): Vector<T>;\n};\n\nconst create: Create = <T extends Animated.Adaptable<number>>(\n  x?: T,\n  y?: T\n) => ({\n  x: x ?? 0,\n  y: y ?? x ?? 0,\n});\n\nconst createValue = (x = 0, y?: number) =>\n  create(new Value(x), new Value(y ?? x));\n\nconst isAdaptable = (value: Adaptable): value is Animated.Adaptable<number> =>\n  typeof value === \"number\" ||\n  value instanceof Animated.Node ||\n  value instanceof Animated.Value;\n\nconst get = (vectors: Adaptable[], dimension: Dimension) =>\n  vectors.map((vector) => (isAdaptable(vector) ? vector : vector[dimension]));\n\nconst apply = (fn: Fn, ...vectors: Adaptable[]) => ({\n  x: fn(...get(vectors, \"x\")),\n  y: fn(...get(vectors, \"y\")),\n});\n\nconst add = (...vectors: BinArgOp) => apply(Animated.add, ...vectors);\nconst sub = (...vectors: BinArgOp) => apply(Animated.sub, ...vectors);\nconst div = (...vectors: BinArgOp) => apply(Animated.divide, ...vectors);\nconst mul = (...vectors: BinArgOp) => apply(Animated.multiply, ...vectors);\nconst pow = (...vectors: [Adaptable, number]) =>\n  apply(Animated.pow, ...vectors);\nconst sqrt = (...vectors: SingleArgOp) => apply(Animated.sqrt, ...vectors);\nconst cos = (...vectors: SingleArgOp) => apply(Animated.cos, ...vectors);\nconst sin = (...vectors: SingleArgOp) => apply(Animated.sin, ...vectors);\nconst min = (vector: Adaptable, value: Animated.Adaptable<number>) =>\n  apply(Animated.min, vector, value);\nconst max = (vector: Adaptable, value: Animated.Adaptable<number>) =>\n  apply(Animated.max, vector, value);\nconst clamp = (value: Adaptable, minVec: Adaptable, maxVec: Adaptable) =>\n  apply(clamp1, value, minVec, maxVec);\n\nconst minus = (a: Adaptable) => mul(-1, a);\n\nconst set = (a: Vector<Animated.Value<number>>, b: Adaptable) =>\n  block([\n    Animated.set(a.x, isAdaptable(b) ? b : b.x),\n    Animated.set(a.y, isAdaptable(b) ? b : b.y),\n  ]);\n\nconst length = (v: Vector) =>\n  Animated.sqrt(Animated.add(Animated.pow(v.x, 2), Animated.pow(v.y, 2)));\nconst normalize = (v: Vector) => div(v, length(v));\nconst dot = (v1: Vector, v2: Vector) =>\n  add(Animated.multiply(v1.x, v2.x), Animated.multiply(v1.y, v2.y));\nconst cross = (v1: Vector, v2: Vector) =>\n  sub(Animated.multiply(v1.x, v2.y), Animated.multiply(v1.y, v2.x));\n\nexport const vec = {\n  create,\n  createValue,\n  minus,\n  add,\n  sub,\n  dot,\n  div,\n  mul,\n  multiply: mul,\n  divide: div,\n  pow,\n  sqrt,\n  set,\n  clamp,\n  apply,\n  min,\n  max,\n  cos,\n  sin,\n  length,\n  normalize,\n  cross,\n};\n"]},"metadata":{},"sourceType":"script"}